//
// +-------------------------------------------------------------------------+
// |      This file was generated by The Interactive Disassembler (IDA)      |
// |           Copyright (c) 2018 Hex-Rays, <support@hex-rays.com>           |
// |                      License info: 48-BEBD-7E64-C8                      |
// |                 Tencent Technoledge (Shenzhen) Co., Ltd                 |
// +-------------------------------------------------------------------------+
//
//
//      This file should be used in the following way:
//         - reload executable into IDA with using switch -c
//         - use File, Load IDC file and load this file.
//
//      NOTE: This file doesn't contain all information from the database.
//

#define UNLOADED_FILE   1
#include <idc.idc>

static main(void)
{
  // set 'loading idc file' mode
  set_inf_attr(INF_GENFLAGS, INFFL_LOADIDC|get_inf_attr(INF_GENFLAGS));
  GenInfo();            // various settings
  Segments();           // segmentation
  Enums();              // enumerations
  Structures();         // structure types
  ApplyStrucTInfos();   // structure type infos
  Patches();            // manual patches
  SegRegs();            // segment register values
  Bytes();              // individual bytes (code,data)
  Functions();          // function definitions
  // clear 'loading idc file' mode
  set_inf_attr(INF_GENFLAGS, ~INFFL_LOADIDC&get_inf_attr(INF_GENFLAGS));
}

//------------------------------------------------------------------------
// General information

static GenInfo(void) {

        delete_all_segments();    // purge database
	set_processor_type("metapc", SETPROC_USER);
	set_inf_attr(INF_COMPILER, 6);
	set_inf_attr(INF_STRLIT_BREAK, 0xA);
	set_flag(INF_CMTFLAG, SW_ALLCMT, 0);
	set_flag(INF_OUTFLAGS, OFLG_SHOW_VOID, 0);
	set_inf_attr(INF_XREFNUM, 2);
	set_flag(INF_OUTFLAGS, OFLG_SHOW_AUTO, 1);
	set_inf_attr(INF_INDENT, 16);
	set_inf_attr(INF_COMMENT, 40);
	set_inf_attr(INF_MAXREF, 0x10);
	add_default_til("gnulnx_x86");
}

//------------------------------------------------------------------------
// Information about segmentation

static Segments(void) {
	set_selector(0X1,0);
	set_selector(0X2,0);
	set_selector(0X3,0);
	set_selector(0X4,0);
	set_selector(0X5,0);
	set_selector(0X6,0);
	set_selector(0X7,0);
	set_selector(0X8,0);
	set_selector(0X9,0);
	set_selector(0XA,0);
	set_selector(0XB,0);
	set_selector(0XC,0);
	set_selector(0XD,0);
	set_selector(0XE,0);
	set_selector(0XF,0);
	set_selector(0X10,0);
	set_selector(0X11,0);
	set_selector(0X12,0);
	set_selector(0X13,0);
	;
	add_segm_ex(0X8048000,0X8048718,0X1,1,6,2,ADDSEG_NOSREG);
	SegRename(0X8048000,"LOAD");
	SegClass (0X8048000,"CODE");
	SegDefReg(0x8048000,"es",0x0);
	SegDefReg(0x8048000,"ss",0x0);
	SegDefReg(0x8048000,"ds",0x11);
	SegDefReg(0x8048000,"fs",0x0);
	SegDefReg(0x8048000,"gs",0x0);
	set_segm_type(0X8048000,2);
	add_segm_ex(0X8048718,0X804873B,0X4,1,5,2,ADDSEG_NOSREG);
	SegRename(0X8048718,".init");
	SegClass (0X8048718,"CODE");
	SegDefReg(0x8048718,"ds",0x11);
	set_segm_type(0X8048718,2);
	add_segm_ex(0X804873B,0X8048740,0X1,1,6,2,ADDSEG_NOSREG);
	SegRename(0X804873B,"LOAD");
	SegClass (0X804873B,"CODE");
	SegDefReg(0x804873B,"es",0x0);
	SegDefReg(0x804873B,"ss",0x0);
	SegDefReg(0x804873B,"ds",0x11);
	SegDefReg(0x804873B,"fs",0x0);
	SegDefReg(0x804873B,"gs",0x0);
	set_segm_type(0X804873B,2);
	add_segm_ex(0X8048740,0X8048940,0X5,1,3,2,ADDSEG_NOSREG);
	SegRename(0X8048740,".plt");
	SegClass (0X8048740,"CODE");
	SegDefReg(0x8048740,"ds",0x11);
	set_segm_type(0X8048740,2);
	add_segm_ex(0X8048940,0X8048948,0X6,1,10,2,ADDSEG_NOSREG);
	SegRename(0X8048940,".plt.got");
	SegClass (0X8048940,"CODE");
	SegDefReg(0x8048940,"ds",0x11);
	set_segm_type(0X8048940,2);
	add_segm_ex(0X8048948,0X8048950,0X1,1,6,2,ADDSEG_NOSREG);
	SegRename(0X8048948,"LOAD");
	SegClass (0X8048948,"CODE");
	SegDefReg(0x8048948,"es",0x0);
	SegDefReg(0x8048948,"ss",0x0);
	SegDefReg(0x8048948,"ds",0x11);
	SegDefReg(0x8048948,"fs",0x0);
	SegDefReg(0x8048948,"gs",0x0);
	set_segm_type(0X8048948,2);
	add_segm_ex(0X8048950,0X8049A92,0X7,1,3,2,ADDSEG_NOSREG);
	SegRename(0X8048950,".text");
	SegClass (0X8048950,"CODE");
	SegDefReg(0x8048950,"ds",0x11);
	set_segm_type(0X8048950,2);
	add_segm_ex(0X8049A92,0X8049A94,0X1,1,6,2,ADDSEG_NOSREG);
	SegRename(0X8049A92,"LOAD");
	SegClass (0X8049A92,"CODE");
	SegDefReg(0x8049A92,"es",0x0);
	SegDefReg(0x8049A92,"ss",0x0);
	SegDefReg(0x8049A92,"ds",0x11);
	SegDefReg(0x8049A92,"fs",0x0);
	SegDefReg(0x8049A92,"gs",0x0);
	set_segm_type(0X8049A92,2);
	add_segm_ex(0X8049A94,0X8049AA8,0X8,1,5,2,ADDSEG_NOSREG);
	SegRename(0X8049A94,".fini");
	SegClass (0X8049A94,"CODE");
	SegDefReg(0x8049A94,"ds",0x11);
	set_segm_type(0X8049A94,2);
	add_segm_ex(0X8049AA8,0X8049F6A,0X9,1,5,2,ADDSEG_NOSREG);
	SegRename(0X8049AA8,".rodata");
	SegClass (0X8049AA8,"CONST");
	SegDefReg(0x8049AA8,"ds",0x11);
	set_segm_type(0X8049AA8,3);
	add_segm_ex(0X8049F6A,0X8049F6C,0X1,1,6,2,ADDSEG_NOSREG);
	SegRename(0X8049F6A,"LOAD");
	SegClass (0X8049F6A,"CODE");
	SegDefReg(0x8049F6A,"es",0x0);
	SegDefReg(0x8049F6A,"ss",0x0);
	SegDefReg(0x8049F6A,"ds",0x11);
	SegDefReg(0x8049F6A,"fs",0x0);
	SegDefReg(0x8049F6A,"gs",0x0);
	set_segm_type(0X8049F6A,2);
	add_segm_ex(0X8049F6C,0X804A018,0XA,1,5,2,ADDSEG_NOSREG);
	SegRename(0X8049F6C,".eh_frame_hdr");
	SegClass (0X8049F6C,"CONST");
	SegDefReg(0x8049F6C,"ds",0x11);
	set_segm_type(0X8049F6C,3);
	add_segm_ex(0X804A018,0X804A2F0,0XB,1,5,2,ADDSEG_NOSREG);
	SegRename(0X804A018,".eh_frame");
	SegClass (0X804A018,"CONST");
	SegDefReg(0x804A018,"ds",0x11);
	set_segm_type(0X804A018,3);
	add_segm_ex(0X804A2F0,0X804AF08,0X1,1,6,2,ADDSEG_NOSREG);
	SegRename(0X804A2F0,"LOAD");
	SegClass (0X804A2F0,"CODE");
	SegDefReg(0x804A2F0,"es",0x0);
	SegDefReg(0x804A2F0,"ss",0x0);
	SegDefReg(0x804A2F0,"ds",0x11);
	SegDefReg(0x804A2F0,"fs",0x0);
	SegDefReg(0x804A2F0,"gs",0x0);
	set_segm_type(0X804A2F0,2);
	add_segm_ex(0X804BF08,0X804BF0C,0XC,1,5,2,ADDSEG_NOSREG);
	SegRename(0X804BF08,".init_array");
	SegClass (0X804BF08,"DATA");
	SegDefReg(0x804BF08,"ds",0x11);
	set_segm_type(0X804BF08,3);
	add_segm_ex(0X804BF0C,0X804BF10,0XD,1,5,2,ADDSEG_NOSREG);
	SegRename(0X804BF0C,".fini_array");
	SegClass (0X804BF0C,"DATA");
	SegDefReg(0x804BF0C,"ds",0x11);
	set_segm_type(0X804BF0C,3);
	add_segm_ex(0X804BF10,0X804BF14,0XE,1,5,2,ADDSEG_NOSREG);
	SegRename(0X804BF10,".jcr");
	SegClass (0X804BF10,"DATA");
	SegDefReg(0x804BF10,"ds",0x11);
	set_segm_type(0X804BF10,3);
	add_segm_ex(0X804BF14,0X804BFFC,0X2,1,6,2,ADDSEG_NOSREG);
	SegRename(0X804BF14,"LOAD");
	SegClass (0X804BF14,"DATA");
	SegDefReg(0x804BF14,"es",0x0);
	SegDefReg(0x804BF14,"ss",0x0);
	SegDefReg(0x804BF14,"ds",0x11);
	SegDefReg(0x804BF14,"fs",0x0);
	SegDefReg(0x804BF14,"gs",0x0);
	set_segm_type(0X804BF14,3);
	add_segm_ex(0X804BFFC,0X804C000,0XF,1,5,2,ADDSEG_NOSREG);
	SegRename(0X804BFFC,".got");
	SegClass (0X804BFFC,"DATA");
	SegDefReg(0x804BFFC,"ds",0x11);
	set_segm_type(0X804BFFC,3);
	add_segm_ex(0X804C000,0X804C088,0X10,1,5,2,ADDSEG_NOSREG);
	SegRename(0X804C000,".got.plt");
	SegClass (0X804C000,"DATA");
	SegDefReg(0x804C000,"ds",0x11);
	set_segm_type(0X804C000,3);
	add_segm_ex(0X804C088,0X804C0A0,0X2,1,6,2,ADDSEG_NOSREG);
	SegRename(0X804C088,"LOAD");
	SegClass (0X804C088,"DATA");
	SegDefReg(0x804C088,"es",0x0);
	SegDefReg(0x804C088,"ss",0x0);
	SegDefReg(0x804C088,"ds",0x11);
	SegDefReg(0x804C088,"fs",0x0);
	SegDefReg(0x804C088,"gs",0x0);
	set_segm_type(0X804C088,3);
	add_segm_ex(0X804C0A0,0X804C658,0X11,1,8,2,ADDSEG_NOSREG);
	SegRename(0X804C0A0,".data");
	SegClass (0X804C0A0,"DATA");
	SegDefReg(0x804C0A0,"ds",0x11);
	set_segm_type(0X804C0A0,3);
	add_segm_ex(0X804C658,0X804C660,0X2,1,6,2,ADDSEG_NOSREG);
	SegRename(0X804C658,"LOAD");
	SegClass (0X804C658,"DATA");
	SegDefReg(0x804C658,"es",0x0);
	SegDefReg(0x804C658,"ss",0x0);
	SegDefReg(0x804C658,"ds",0x11);
	SegDefReg(0x804C658,"fs",0x0);
	SegDefReg(0x804C658,"gs",0x0);
	set_segm_type(0X804C658,3);
	add_segm_ex(0X804C660,0X804C694,0X12,1,8,2,ADDSEG_NOSREG);
	SegRename(0X804C660,".bss");
	SegClass (0X804C660,"BSS");
	SegDefReg(0x804C660,"ds",0x11);
	set_segm_type(0X804C660,9);
	add_segm_ex(0X804C694,0X804D658,0X2,1,6,2,ADDSEG_NOSREG);
	SegRename(0X804C694,"LOAD");
	SegClass (0X804C694,"DATA");
	SegDefReg(0x804C694,"es",0x0);
	SegDefReg(0x804C694,"ss",0x0);
	SegDefReg(0x804C694,"ds",0x11);
	SegDefReg(0x804C694,"fs",0x0);
	SegDefReg(0x804C694,"gs",0x0);
	set_segm_type(0X804C694,3);
	add_segm_ex(0X804D658,0X804D6D8,0X13,1,5,2,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X804D658,"extern");
	SegClass (0X804D658,"extern");
	set_segm_type(0X804D658,1);
	set_inf_attr(INF_LOW_OFF, 0x8048000);
	set_inf_attr(INF_HIGH_OFF, 0x804D6D8);
}

//------------------------------------------------------------------------
// Information about enum types

static Enums(void) {
        auto id;
        begin_type_updating(UTP_ENUM);
        end_type_updating(UTP_ENUM);
}

static ApplyStrucTInfos_0(void) {
        auto id;
	id = get_struc_id("Elf32_Sym");
	SetType(get_member_id(id, 0x0), "unsigned __int32");
	SetType(get_member_id(id, 0x4), "unsigned __int32");
	SetType(get_member_id(id, 0x8), "unsigned __int32");
	SetType(get_member_id(id, 0xC), "unsigned __int8");
	SetType(get_member_id(id, 0xD), "unsigned __int8");
	SetType(get_member_id(id, 0xE), "unsigned __int16");
	id = get_struc_id("Elf32_Rel");
	SetType(get_member_id(id, 0x0), "unsigned __int32");
	SetType(get_member_id(id, 0x4), "unsigned __int32");
	id = get_struc_id("Elf32_Dyn");
	SetType(get_member_id(id, 0x0), "__int32");
	SetType(get_member_id(id, 0x4), "union Elf32_Dyn::$A263394DDF3EC2D4B1B8448EDD30E249");
	id = get_struc_id("Elf32_Dyn::$A263394DDF3EC2D4B1B8448EDD30E249");
	SetType(get_member_id(id, 0x0), "unsigned __int32");
	SetType(get_member_id(id, 0x1), "unsigned __int32");
	id = get_struc_id("Elf32_Verneed");
	SetType(get_member_id(id, 0x0), "unsigned __int16");
	SetType(get_member_id(id, 0x2), "unsigned __int16");
	SetType(get_member_id(id, 0x4), "unsigned __int32");
	SetType(get_member_id(id, 0x8), "unsigned __int32");
	SetType(get_member_id(id, 0xC), "unsigned __int32");
	id = get_struc_id("Elf32_Vernaux");
	SetType(get_member_id(id, 0x0), "unsigned __int32");
	SetType(get_member_id(id, 0x4), "unsigned __int16");
	SetType(get_member_id(id, 0x6), "unsigned __int16");
	SetType(get_member_id(id, 0x8), "unsigned __int32");
	SetType(get_member_id(id, 0xC), "unsigned __int32");
	return id;
}

//------------------------------------------------------------------------
// Information about type information for structure members

static ApplyStrucTInfos() {
	ApplyStrucTInfos_0();
}

static Structures_0(id) {
        auto mid;

	id = add_struc(-1,"Elf32_Sym",0);
	id = add_struc(-1,"Elf32_Rel",0);
	id = add_struc(-1,"Elf32_Dyn",0);
	id = add_struc(-1,"Elf32_Dyn::$A263394DDF3EC2D4B1B8448EDD30E249",1);
	id = add_struc(-1,"Elf32_Verneed",0);
	id = add_struc(-1,"Elf32_Vernaux",0);
	
	id = get_struc_id("Elf32_Sym");
	mid = add_struc_member(id,"st_name",	0,	0x20500400,	0X804842C,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"st_value",	0X4,	0x20500400,	0,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"st_size",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"st_info",	0XC,	0x000400,	-1,	1);
	mid = add_struc_member(id,"st_other",	0XD,	0x000400,	-1,	1);
	mid = add_struc_member(id,"st_shndx",	0XE,	0x10000400,	-1,	2);
	set_struc_align(id,2);
	
	id = get_struc_id("Elf32_Rel");
	mid = add_struc_member(id,"r_offset",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"r_info",	0X4,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("Elf32_Dyn::$A263394DDF3EC2D4B1B8448EDD30E249");
	mid = add_struc_member(id,"d_val",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"d_ptr",	0,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("Elf32_Dyn");
	mid = add_struc_member(id,"d_tag",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"d_un",	0X4,	0x60000400,	get_struc_id("Elf32_Dyn::$A263394DDF3EC2D4B1B8448EDD30E249"),	4);
	set_struc_align(id,2);
	
	id = get_struc_id("Elf32_Verneed");
	mid = add_struc_member(id,"vn_version",	0,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"vn_cnt",	0X2,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"vn_file",	0X4,	0x20500400,	0X804842C,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"vn_aux",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"vn_next",	0XC,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("Elf32_Vernaux");
	mid = add_struc_member(id,"vna_hash",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"vna_flags",	0X4,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"vna_other",	0X6,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"vna_name",	0X8,	0x20500400,	0X804842C,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"vna_next",	0XC,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	return id;
}

//------------------------------------------------------------------------
// Information about structure types

static Structures(void) {
        auto id;
        begin_type_updating(UTP_STRUCT);
	id = Structures_0(id);
	patch_byte	(0X80491ED,	0XE9);
	patch_byte	(0X80491EE,	0X31);
	patch_byte	(0X80491EF,	0X8);
	patch_byte	(0X80491F0,	0);
	patch_byte	(0X80491F2,	0X90);
	patch_byte	(0X8049A28,	0X81);
	patch_byte	(0X8049A29,	0XEC);
	patch_byte	(0X8049A2A,	0XC4);
	patch_byte	(0X8049A2B,	0X12);
	patch_byte	(0X8049A2C,	0X1);
	patch_byte	(0X8049A2D,	0);
	patch_byte	(0X8049A2E,	0XE9);
	patch_byte	(0X8049A2F,	0XC2);
	patch_byte	(0X8049A30,	0XF7);
	patch_byte	(0X8049A31,	0XFF);
	patch_byte	(0X8049A32,	0XFF);
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_0(void) {
        auto x;
#define id x

	set_cmt	(0X8048000,	"File format: \\x7FELF",	0);
	update_extra_cmt		(0X8048000,	E_PREV + 0,	"; File Name   : /Users/hzshang/Downloads/qwb/xx_easy_server/xx_easy_server");
	update_extra_cmt		(0X8048000,	E_PREV + 1,	"; Format      : ELF for Intel 386 (Executable)");
	update_extra_cmt		(0X8048000,	E_PREV + 2,	"; Imagebase   : 8048000");
	update_extra_cmt		(0X8048000,	E_PREV + 3,	"; Interpreter '/lib/ld-linux.so.2'");
	update_extra_cmt		(0X8048000,	E_PREV + 4,	"; Needed Library 'libc.so.6'");
	update_extra_cmt		(0X8048000,	E_PREV + 5,	"; ");
	create_dword	(x=0X8048000);
	op_hex		(x,	0);
	set_cmt	(0X8048004,	"File class: 32-bit",	0);
	create_byte	(x=0X8048004);
	op_hex		(x,	0);
	set_cmt	(0X8048005,	"Data encoding: little-endian",	0);
	create_byte	(x=0X8048005);
	op_hex		(x,	0);
	set_cmt	(0X8048006,	"File version",	0);
	create_byte	(x=0X8048006);
	op_hex		(x,	0);
	set_cmt	(0X8048007,	"OS/ABI: UNIX System V ABI",	0);
	create_byte	(x=0X8048007);
	op_hex		(x,	0);
	set_cmt	(0X8048008,	"ABI Version",	0);
	create_byte	(x=0X8048008);
	op_hex		(x,	0);
	set_cmt	(0X8048009,	"Padding",	0);
	create_byte	(x=0X8048009);
	make_array	(x,	0X7);
	op_hex		(x,	0);
	set_cmt	(0X8048010,	"File type: Executable",	0);
	create_word	(x=0X8048010);
	op_hex		(x,	0);
	set_cmt	(0X8048012,	"Machine: Intel 386",	0);
	create_word	(x=0X8048012);
	op_hex		(x,	0);
	set_cmt	(0X8048014,	"File version",	0);
	create_dword	(x=0X8048014);
	op_hex		(x,	0);
	set_cmt	(0X8048018,	"Entry point",	0);
	create_dword	(x=0X8048018);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X804801C,	"PHT file offset",	0);
	create_dword	(x=0X804801C);
	op_hex		(x,	0);
	set_cmt	(0X8048020,	"SHT file offset",	0);
	create_dword	(x=0X8048020);
	op_hex		(x,	0);
	set_cmt	(0X8048024,	"Processor-specific flags",	0);
	create_dword	(x=0X8048024);
	op_hex		(x,	0);
	set_cmt	(0X8048028,	"ELF header size",	0);
	create_word	(x=0X8048028);
	op_hex		(x,	0);
	set_cmt	(0X804802A,	"PHT entry size",	0);
	create_word	(x=0X804802A);
	op_hex		(x,	0);
	set_cmt	(0X804802C,	"Number of entries in PHT",	0);
	create_word	(x=0X804802C);
	op_hex		(x,	0);
	set_cmt	(0X804802E,	"SHT entry size",	0);
	create_word	(x=0X804802E);
	op_hex		(x,	0);
	set_cmt	(0X8048030,	"Number of entries in SHT",	0);
	create_word	(x=0X8048030);
	op_hex		(x,	0);
	set_cmt	(0X8048032,	"SHT entry index for string table",	0);
	create_word	(x=0X8048032);
	op_hex		(x,	0);
	set_cmt	(0X8048034,	"Type: PHDR",	0);
	update_extra_cmt		(0X8048034,	E_PREV + 0,	"; ELF32 Program Header");
	update_extra_cmt		(0X8048034,	E_PREV + 1,	"; PHT Entry 0");
	create_dword	(x=0X8048034);
	op_hex		(x,	0);
	set_cmt	(0X8048038,	"File offset",	0);
	create_dword	(x=0X8048038);
	op_hex		(x,	0);
	set_cmt	(0X804803C,	"Virtual address",	0);
	create_dword	(x=0X804803C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X8048040,	"Physical address",	0);
	create_dword	(x=0X8048040);
	op_hex		(x,	0);
	set_cmt	(0X8048044,	"Size in file image",	0);
	create_dword	(x=0X8048044);
	op_hex		(x,	0);
	set_cmt	(0X8048048,	"Size in memory image",	0);
	create_dword	(x=0X8048048);
	op_hex		(x,	0);
	set_cmt	(0X804804C,	"Flags",	0);
	create_dword	(x=0X804804C);
	op_hex		(x,	0);
	set_cmt	(0X8048050,	"Alignment",	0);
	create_dword	(x=0X8048050);
	op_hex		(x,	0);
	set_cmt	(0X8048054,	"Type: INTERP",	0);
	update_extra_cmt		(0X8048054,	E_PREV + 0,	"; PHT Entry 1");
	create_dword	(x=0X8048054);
	op_hex		(x,	0);
	set_cmt	(0X8048058,	"File offset",	0);
	create_dword	(x=0X8048058);
	op_hex		(x,	0);
	set_cmt	(0X804805C,	"Virtual address",	0);
	create_dword	(x=0X804805C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X8048060,	"Physical address",	0);
	create_dword	(x=0X8048060);
	op_hex		(x,	0);
	set_cmt	(0X8048064,	"Size in file image",	0);
	create_dword	(x=0X8048064);
	op_hex		(x,	0);
	set_cmt	(0X8048068,	"Size in memory image",	0);
	create_dword	(x=0X8048068);
	op_hex		(x,	0);
	set_cmt	(0X804806C,	"Flags",	0);
	create_dword	(x=0X804806C);
	op_hex		(x,	0);
	set_cmt	(0X8048070,	"Alignment",	0);
	create_dword	(x=0X8048070);
	op_hex		(x,	0);
	set_cmt	(0X8048074,	"Type: LOAD",	0);
	update_extra_cmt		(0X8048074,	E_PREV + 0,	"; PHT Entry 2");
	create_dword	(x=0X8048074);
	op_hex		(x,	0);
	set_cmt	(0X8048078,	"File offset",	0);
	create_dword	(x=0X8048078);
	op_hex		(x,	0);
	set_cmt	(0X804807C,	"Virtual address",	0);
	create_dword	(x=0X804807C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X8048080,	"Physical address",	0);
	create_dword	(x=0X8048080);
	op_hex		(x,	0);
	set_cmt	(0X8048084,	"Size in file image",	0);
	create_dword	(x=0X8048084);
	op_hex		(x,	0);
	set_cmt	(0X8048088,	"Size in memory image",	0);
	create_dword	(x=0X8048088);
	op_hex		(x,	0);
	set_cmt	(0X804808C,	"Flags",	0);
	create_dword	(x=0X804808C);
	op_hex		(x,	0);
	set_cmt	(0X8048090,	"Alignment",	0);
	create_dword	(x=0X8048090);
	op_hex		(x,	0);
	set_cmt	(0X8048094,	"Type: LOAD",	0);
	update_extra_cmt		(0X8048094,	E_PREV + 0,	"; PHT Entry 3");
	create_dword	(x=0X8048094);
	op_hex		(x,	0);
	set_cmt	(0X8048098,	"File offset",	0);
	create_dword	(x=0X8048098);
	op_hex		(x,	0);
	set_cmt	(0X804809C,	"Virtual address",	0);
	create_dword	(x=0X804809C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X80480A0,	"Physical address",	0);
	create_dword	(x=0X80480A0);
	op_hex		(x,	0);
	set_cmt	(0X80480A4,	"Size in file image",	0);
	create_dword	(x=0X80480A4);
	op_hex		(x,	0);
	set_cmt	(0X80480A8,	"Size in memory image",	0);
	create_dword	(x=0X80480A8);
	op_hex		(x,	0);
	set_cmt	(0X80480AC,	"Flags",	0);
	create_dword	(x=0X80480AC);
	op_hex		(x,	0);
	set_cmt	(0X80480B0,	"Alignment",	0);
	create_dword	(x=0X80480B0);
	op_hex		(x,	0);
	set_cmt	(0X80480B4,	"Type: DYNAMIC",	0);
	update_extra_cmt		(0X80480B4,	E_PREV + 0,	"; PHT Entry 4");
	create_dword	(x=0X80480B4);
	op_hex		(x,	0);
	set_cmt	(0X80480B8,	"File offset",	0);
	create_dword	(x=0X80480B8);
	op_hex		(x,	0);
	set_cmt	(0X80480BC,	"Virtual address",	0);
	create_dword	(x=0X80480BC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X80480C0,	"Physical address",	0);
	create_dword	(x=0X80480C0);
	op_hex		(x,	0);
	set_cmt	(0X80480C4,	"Size in file image",	0);
	create_dword	(x=0X80480C4);
	op_hex		(x,	0);
	set_cmt	(0X80480C8,	"Size in memory image",	0);
	create_dword	(x=0X80480C8);
	op_hex		(x,	0);
	set_cmt	(0X80480CC,	"Flags",	0);
	create_dword	(x=0X80480CC);
	op_hex		(x,	0);
	set_cmt	(0X80480D0,	"Alignment",	0);
	create_dword	(x=0X80480D0);
	op_hex		(x,	0);
	set_cmt	(0X80480D4,	"Type: NOTE",	0);
	update_extra_cmt		(0X80480D4,	E_PREV + 0,	"; PHT Entry 5");
	create_dword	(x=0X80480D4);
	op_hex		(x,	0);
	set_cmt	(0X80480D8,	"File offset",	0);
	create_dword	(x=0X80480D8);
	op_hex		(x,	0);
	set_cmt	(0X80480DC,	"Virtual address",	0);
	create_dword	(x=0X80480DC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X80480E0,	"Physical address",	0);
	create_dword	(x=0X80480E0);
	op_hex		(x,	0);
	set_cmt	(0X80480E4,	"Size in file image",	0);
	create_dword	(x=0X80480E4);
	op_hex		(x,	0);
	set_cmt	(0X80480E8,	"Size in memory image",	0);
	create_dword	(x=0X80480E8);
	op_hex		(x,	0);
	set_cmt	(0X80480EC,	"Flags",	0);
	create_dword	(x=0X80480EC);
	op_hex		(x,	0);
	set_cmt	(0X80480F0,	"Alignment",	0);
	create_dword	(x=0X80480F0);
	op_hex		(x,	0);
	set_cmt	(0X80480F4,	"Type: EH_FRAME",	0);
	update_extra_cmt		(0X80480F4,	E_PREV + 0,	"; PHT Entry 6");
	create_dword	(x=0X80480F4);
	op_hex		(x,	0);
	set_cmt	(0X80480F8,	"File offset",	0);
	create_dword	(x=0X80480F8);
	op_hex		(x,	0);
	set_cmt	(0X80480FC,	"Virtual address",	0);
	create_dword	(x=0X80480FC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X8048100,	"Physical address",	0);
	create_dword	(x=0X8048100);
	op_hex		(x,	0);
	set_cmt	(0X8048104,	"Size in file image",	0);
	create_dword	(x=0X8048104);
	op_hex		(x,	0);
	set_cmt	(0X8048108,	"Size in memory image",	0);
	create_dword	(x=0X8048108);
	op_hex		(x,	0);
	set_cmt	(0X804810C,	"Flags",	0);
	create_dword	(x=0X804810C);
	op_hex		(x,	0);
	set_cmt	(0X8048110,	"Alignment",	0);
	create_dword	(x=0X8048110);
	op_hex		(x,	0);
	set_cmt	(0X8048114,	"Type: STACK",	0);
	update_extra_cmt		(0X8048114,	E_PREV + 0,	"; PHT Entry 7");
	create_dword	(x=0X8048114);
	op_hex		(x,	0);
	set_cmt	(0X8048118,	"File offset",	0);
	create_dword	(x=0X8048118);
	op_hex		(x,	0);
	set_cmt	(0X804811C,	"Virtual address",	0);
	create_dword	(0X804811C);
	set_cmt	(0X8048120,	"Physical address",	0);
	create_dword	(x=0X8048120);
	op_hex		(x,	0);
	set_cmt	(0X8048124,	"Size in file image",	0);
	create_dword	(x=0X8048124);
	op_hex		(x,	0);
	set_cmt	(0X8048128,	"Size in memory image",	0);
	create_dword	(x=0X8048128);
	op_hex		(x,	0);
	set_cmt	(0X804812C,	"Flags",	0);
	create_dword	(x=0X804812C);
	op_hex		(x,	0);
	set_cmt	(0X8048130,	"Alignment",	0);
	create_dword	(x=0X8048130);
	op_hex		(x,	0);
	set_cmt	(0X8048134,	"Type: RO-AFTER",	0);
	update_extra_cmt		(0X8048134,	E_PREV + 0,	"; PHT Entry 8");
	create_dword	(x=0X8048134);
	op_hex		(x,	0);
	set_cmt	(0X8048138,	"File offset",	0);
	create_dword	(x=0X8048138);
	op_hex		(x,	0);
	set_cmt	(0X804813C,	"Virtual address",	0);
	create_dword	(x=0X804813C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X8048140,	"Physical address",	0);
	create_dword	(x=0X8048140);
	op_hex		(x,	0);
	set_cmt	(0X8048144,	"Size in file image",	0);
	create_dword	(x=0X8048144);
	op_hex		(x,	0);
	set_cmt	(0X8048148,	"Size in memory image",	0);
	create_dword	(x=0X8048148);
	op_hex		(x,	0);
	set_cmt	(0X804814C,	"Flags",	0);
	create_dword	(x=0X804814C);
	op_hex		(x,	0);
	set_cmt	(0X8048150,	"Alignment",	0);
	create_dword	(x=0X8048150);
	op_hex		(x,	0);
	create_strlit	(0X8048154,	0X13);
	set_name	(0X8048154,	"aLibLdLinuxSo2");
	set_cmt	(0X8048168,	"Name Size",	0);
	update_extra_cmt		(0X8048168,	E_PREV + 0,	"; ELF Note Entry");
	create_dword	(0X8048168);
	set_cmt	(0X804816C,	"Desc Size",	0);
	create_dword	(0X804816C);
	set_cmt	(0X8048170,	"Type: NT_GNU_ABI_TAG",	0);
	create_dword	(0X8048170);
	set_cmt	(0X8048174,	"Name",	0);
	create_strlit	(0X8048174,	0X4);
	set_name	(0X8048174,	"aGnu");
	set_cmt	(0X8048178,	"ABI: Linux 2.6.32",	0);
	create_dword	(0X8048178);
	make_array	(0X8048178,	0X4);
	set_cmt	(0X8048188,	"Name Size",	0);
	update_extra_cmt		(0X8048188,	E_PREV + 0,	"; ELF Note Entry");
	create_dword	(0X8048188);
	set_cmt	(0X804818C,	"Desc Size",	0);
	create_dword	(0X804818C);
	set_cmt	(0X8048190,	"Type: NT_GNU_BUILD_ID",	0);
	create_dword	(0X8048190);
	set_cmt	(0X8048194,	"Name",	0);
	create_strlit	(0X8048194,	0X4);
	set_name	(0X8048194,	"aGnu_0");
	set_cmt	(0X8048198,	"Desc",	0);
	create_byte	(0X8048198);
	make_array	(0X8048198,	0X14);
	update_extra_cmt		(0X80481AC,	E_PREV + 0,	"; ELF GNU Hash Table");
	create_dword	(x=0X80481AC);
	op_hex		(x,	0);
	set_name	(0X80481AC,	"elf_gnu_hash_nbuckets");
	create_dword	(x=0X80481B0);
	op_hex		(x,	0);
	set_name	(0X80481B0,	"elf_gnu_hash_symbias");
	create_dword	(x=0X80481B4);
	op_hex		(x,	0);
	set_name	(0X80481B4,	"elf_gnu_hash_bitmask_nwords");
	create_dword	(x=0X80481B8);
	op_hex		(x,	0);
	set_name	(0X80481B8,	"elf_gnu_hash_shift");
	create_dword	(x=0X80481BC);
	op_hex		(x,	0);
	set_name	(0X80481BC,	"elf_gnu_hash_indexes");
	create_dword	(x=0X80481C0);
	make_array	(x,	0X3);
	op_hex		(x,	0);
	set_name	(0X80481C0,	"elf_gnu_hash_bucket");
	create_dword	(x=0X80481CC);
	make_array	(x,	0X4);
	op_hex		(x,	0);
	set_name	(0X80481CC,	"elf_gnu_hash_chain");
	update_extra_cmt		(0X80481DC,	E_PREV + 0,	"; ELF Symbol Table");
	MakeStruct	(0X80481DC,	"Elf32_Sym");
	MakeStruct	(0X80481EC,	"Elf32_Sym");
	MakeStruct	(0X80481FC,	"Elf32_Sym");
	MakeStruct	(0X804820C,	"Elf32_Sym");
	MakeStruct	(0X804821C,	"Elf32_Sym");
	MakeStruct	(0X804822C,	"Elf32_Sym");
	MakeStruct	(0X804823C,	"Elf32_Sym");
	MakeStruct	(0X804824C,	"Elf32_Sym");
	MakeStruct	(0X804825C,	"Elf32_Sym");
	MakeStruct	(0X804826C,	"Elf32_Sym");
	MakeStruct	(0X804827C,	"Elf32_Sym");
	MakeStruct	(0X804828C,	"Elf32_Sym");
	MakeStruct	(0X804829C,	"Elf32_Sym");
	MakeStruct	(0X80482AC,	"Elf32_Sym");
	MakeStruct	(0X80482BC,	"Elf32_Sym");
	MakeStruct	(0X80482CC,	"Elf32_Sym");
	MakeStruct	(0X80482DC,	"Elf32_Sym");
	MakeStruct	(0X80482EC,	"Elf32_Sym");
	MakeStruct	(0X80482FC,	"Elf32_Sym");
	MakeStruct	(0X804830C,	"Elf32_Sym");
	MakeStruct	(0X804831C,	"Elf32_Sym");
	MakeStruct	(0X804832C,	"Elf32_Sym");
	MakeStruct	(0X804833C,	"Elf32_Sym");
	MakeStruct	(0X804834C,	"Elf32_Sym");
	MakeStruct	(0X804835C,	"Elf32_Sym");
	MakeStruct	(0X804836C,	"Elf32_Sym");
	MakeStruct	(0X804837C,	"Elf32_Sym");
	MakeStruct	(0X804838C,	"Elf32_Sym");
	MakeStruct	(0X804839C,	"Elf32_Sym");
	MakeStruct	(0X80483AC,	"Elf32_Sym");
	MakeStruct	(0X80483BC,	"Elf32_Sym");
	MakeStruct	(0X80483CC,	"Elf32_Sym");
	MakeStruct	(0X80483DC,	"Elf32_Sym");
	MakeStruct	(0X80483EC,	"Elf32_Sym");
	MakeStruct	(0X80483FC,	"Elf32_Sym");
	MakeStruct	(0X804840C,	"Elf32_Sym");
	MakeStruct	(0X804841C,	"Elf32_Sym");
	update_extra_cmt		(0X804842C,	E_PREV + 0,	"; ELF String Table");
	create_byte	(0X804842C);
	create_strlit	(0X804842D,	0XA);
	set_name	(0X804842D,	"aLibcSo6");
	create_strlit	(0X8048437,	0XF);
	set_name	(0X8048437,	"aIoStdinUsed");
	create_strlit	(0X8048446,	0X7);
	set_name	(0X8048446,	"aStrcpy");
	create_strlit	(0X804844D,	0X6);
	set_name	(0X804844D,	"aFopen");
	create_strlit	(0X8048453,	0X8);
	set_name	(0X8048453,	"aStrncmp");
	create_strlit	(0X804845B,	0X10);
	set_name	(0X804845B,	"aIsoc99Sscanf");
	create_strlit	(0X804846B,	0X8);
	set_name	(0X804846B,	"aStrncpy");
	create_strlit	(0X8048473,	0X6);
	set_name	(0X8048473,	"aStdin");
	create_strlit	(0X8048479,	0X7);
	set_name	(0X8048479,	"aStrspn");
	create_strlit	(0X8048480,	0X9);
	set_name	(0X8048480,	"aStrftime");
	create_strlit	(0X8048489,	0X7);
	set_name	(0X8048489,	"aGmtime");
	create_strlit	(0X8048490,	0X6);
	set_name	(0X8048490,	"aFgets");
	create_strlit	(0X8048496,	0X7);
	set_name	(0X8048496,	"aStrlen");
	create_strlit	(0X804849D,	0X7);
	set_name	(0X804849D,	"aMemset");
	create_strlit	(0X80484A4,	0X7);
	set_name	(0X80484A4,	"aStrstr");
	create_strlit	(0X80484AB,	0X8);
	set_name	(0X80484AB,	"aStrcspn");
	create_strlit	(0X80484B3,	0X7);
	set_name	(0X80484B3,	"aStdout");
	create_strlit	(0X80484BA,	0X7);
	set_name	(0X80484BA,	"aFclose");
	create_strlit	(0X80484C1,	0X7);
	set_name	(0X80484C1,	"aMalloc");
	create_strlit	(0X80484C8,	0XB);
	set_name	(0X80484C8,	"aStrcasecmp");
	create_strlit	(0X80484D3,	0X7);
	set_name	(0X80484D3,	"aStderr");
	create_strlit	(0X80484DA,	0X6);
	set_name	(0X80484DA,	"aAlarm");
	create_strlit	(0X80484E0,	0XC);
	set_name	(0X80484E0,	"aStrncasecmp");
	create_strlit	(0X80484EC,	0X8);
	set_name	(0X80484EC,	"aStrncat");
	create_strlit	(0X80484F4,	0X7);
	set_name	(0X80484F4,	"aFileno");
	create_strlit	(0X80484FB,	0X7);
	set_name	(0X80484FB,	"aFwrite");
	create_strlit	(0X8048502,	0X6);
	set_name	(0X8048502,	"aFread");
	create_strlit	(0X8048508,	0X5);
	set_name	(0X8048508,	"aAtoi");
	create_strlit	(0X804850D,	0X7);
	set_name	(0X804850D,	"aStrchr");
	create_strlit	(0X8048514,	0X8);
	set_name	(0X8048514,	"aSetvbuf");
	create_strlit	(0X804851C,	0X7);
	set_name	(0X804851C,	"aStrcmp");
	create_strlit	(0X8048523,	0X12);
	set_name	(0X8048523,	"aLibcStartMain");
	create_strlit	(0X8048535,	0X9);
	set_name	(0X8048535,	"aVfprintf");
	create_strlit	(0X804853E,	0X9);
	set_name	(0X804853E,	"aSnprintf");
	create_strlit	(0X8048547,	0XF);
	set_name	(0X8048547,	"aGmonStart");
	create_strlit	(0X8048556,	0XA);
	set_name	(0X8048556,	"aGlibc27");
	create_strlit	(0X8048560,	0XA);
	set_name	(0X8048560,	"aGlibc21");
	create_strlit	(0X804856A,	0XA);
	set_name	(0X804856A,	"aGlibc20");
	update_extra_cmt		(0X8048574,	E_PREV + 0,	"; ELF GNU Symbol Version Table");
	create_word	(0X8048574);
	set_cmt	(0X8048576,	"strstr@@GLIBC_2.0",	0);
	create_word	(0X8048576);
	set_cmt	(0X8048578,	"strcmp@@GLIBC_2.0",	0);
	create_word	(0X8048578);
	set_cmt	(0X804857A,	"strcspn@@GLIBC_2.0",	0);
	create_word	(0X804857A);
	set_cmt	(0X804857C,	"fgets@@GLIBC_2.0",	0);
	create_word	(0X804857C);
	set_cmt	(0X804857E,	"fclose@@GLIBC_2.1",	0);
	create_word	(0X804857E);
	set_cmt	(0X8048580,	"time@@GLIBC_2.0",	0);
	create_word	(0X8048580);
	set_cmt	(0X8048582,	"alarm@@GLIBC_2.0",	0);
	create_word	(0X8048582);
	set_cmt	(0X8048584,	"fwrite@@GLIBC_2.0",	0);
	create_word	(0X8048584);
	set_cmt	(0X8048586,	"fread@@GLIBC_2.0",	0);
	create_word	(0X8048586);
	set_cmt	(0X8048588,	"strcpy@@GLIBC_2.0",	0);
	create_word	(0X8048588);
	set_cmt	(0X804858A,	"malloc@@GLIBC_2.0",	0);
	create_word	(0X804858A);
	set_cmt	(0X804858C,	"local  symbol: __gmon_start__",	0);
	create_word	(0X804858C);
	set_cmt	(0X804858E,	"strftime@@GLIBC_2.0",	0);
	create_word	(0X804858E);
	set_cmt	(0X8048590,	"strchr@@GLIBC_2.0",	0);
	create_word	(0X8048590);
	set_cmt	(0X8048592,	"strlen@@GLIBC_2.0",	0);
	create_word	(0X8048592);
	set_cmt	(0X8048594,	"__libc_start_main@@GLIBC_2.0",	0);
	create_word	(0X8048594);
	set_cmt	(0X8048596,	"fprintf@@GLIBC_2.0",	0);
	create_word	(0X8048596);
	set_cmt	(0X8048598,	"strcasecmp@@GLIBC_2.0",	0);
	create_word	(0X8048598);
	set_cmt	(0X804859A,	"__isoc99_sscanf@@GLIBC_2.7",	0);
	create_word	(0X804859A);
	set_cmt	(0X804859C,	"setvbuf@@GLIBC_2.0",	0);
	create_word	(0X804859C);
	set_cmt	(0X804859E,	"fopen@@GLIBC_2.1",	0);
	create_word	(0X804859E);
	set_cmt	(0X80485A0,	"gmtime@@GLIBC_2.0",	0);
	create_word	(0X80485A0);
	set_cmt	(0X80485A2,	"memset@@GLIBC_2.0",	0);
	create_word	(0X80485A2);
	set_cmt	(0X80485A4,	"snprintf@@GLIBC_2.0",	0);
	create_word	(0X80485A4);
	set_cmt	(0X80485A6,	"strncpy@@GLIBC_2.0",	0);
	create_word	(0X80485A6);
	set_cmt	(0X80485A8,	"fileno@@GLIBC_2.0",	0);
	create_word	(0X80485A8);
	set_cmt	(0X80485AA,	"strncasecmp@@GLIBC_2.0",	0);
	create_word	(0X80485AA);
	set_cmt	(0X80485AC,	"vfprintf@@GLIBC_2.0",	0);
	create_word	(0X80485AC);
	set_cmt	(0X80485AE,	"atoi@@GLIBC_2.0",	0);
	create_word	(0X80485AE);
	set_cmt	(0X80485B0,	"strncmp@@GLIBC_2.0",	0);
	create_word	(0X80485B0);
	set_cmt	(0X80485B2,	"strspn@@GLIBC_2.0",	0);
	create_word	(0X80485B2);
	set_cmt	(0X80485B4,	"strncat@@GLIBC_2.0",	0);
	create_word	(0X80485B4);
	set_cmt	(0X80485B6,	"stdout@@GLIBC_2.0",	0);
	create_word	(0X80485B6);
	set_cmt	(0X80485B8,	"stderr@@GLIBC_2.0",	0);
	create_word	(0X80485B8);
	set_cmt	(0X80485BA,	"global symbol: _IO_stdin_used",	0);
	create_word	(0X80485BA);
	set_cmt	(0X80485BC,	"stdin@@GLIBC_2.0",	0);
	create_word	(0X80485BC);
	create_word	(0X80485BE);
	update_extra_cmt		(0X80485C0,	E_PREV + 0,	"; ELF GNU Symbol Version Requirements");
	MakeStruct	(0X80485C0,	"Elf32_Verneed");
	MakeStruct	(0X80485D0,	"Elf32_Vernaux");
	MakeStruct	(0X80485E0,	"Elf32_Vernaux");
	MakeStruct	(0X80485F0,	"Elf32_Vernaux");
	set_cmt	(0X8048600,	"R_386_GLOB_DAT __gmon_start__",	0);
	update_extra_cmt		(0X8048600,	E_PREV + 0,	"; ELF REL Relocation Table");
	MakeStruct	(0X8048600,	"Elf32_Rel");
	set_cmt	(0X8048608,	"R_386_COPY stderr",	0);
	MakeStruct	(0X8048608,	"Elf32_Rel");
	set_cmt	(0X8048610,	"R_386_COPY stdin",	0);
	MakeStruct	(0X8048610,	"Elf32_Rel");
	set_cmt	(0X8048618,	"R_386_COPY stdout",	0);
	MakeStruct	(0X8048618,	"Elf32_Rel");
	set_cmt	(0X8048620,	"R_386_JMP_SLOT strstr",	0);
	update_extra_cmt		(0X8048620,	E_PREV + 0,	"; ELF JMPREL Relocation Table");
	MakeStruct	(0X8048620,	"Elf32_Rel");
	set_cmt	(0X8048628,	"R_386_JMP_SLOT strcmp",	0);
	MakeStruct	(0X8048628,	"Elf32_Rel");
	set_cmt	(0X8048630,	"R_386_JMP_SLOT strcspn",	0);
	MakeStruct	(0X8048630,	"Elf32_Rel");
	set_cmt	(0X8048638,	"R_386_JMP_SLOT fgets",	0);
	MakeStruct	(0X8048638,	"Elf32_Rel");
	set_cmt	(0X8048640,	"R_386_JMP_SLOT fclose",	0);
	MakeStruct	(0X8048640,	"Elf32_Rel");
	set_cmt	(0X8048648,	"R_386_JMP_SLOT time",	0);
	MakeStruct	(0X8048648,	"Elf32_Rel");
	set_cmt	(0X8048650,	"R_386_JMP_SLOT alarm",	0);
	MakeStruct	(0X8048650,	"Elf32_Rel");
	set_cmt	(0X8048658,	"R_386_JMP_SLOT fwrite",	0);
	MakeStruct	(0X8048658,	"Elf32_Rel");
	set_cmt	(0X8048660,	"R_386_JMP_SLOT fread",	0);
	MakeStruct	(0X8048660,	"Elf32_Rel");
	set_cmt	(0X8048668,	"R_386_JMP_SLOT strcpy",	0);
	MakeStruct	(0X8048668,	"Elf32_Rel");
	set_cmt	(0X8048670,	"R_386_JMP_SLOT malloc",	0);
	MakeStruct	(0X8048670,	"Elf32_Rel");
	set_cmt	(0X8048678,	"R_386_JMP_SLOT strftime",	0);
	MakeStruct	(0X8048678,	"Elf32_Rel");
	set_cmt	(0X8048680,	"R_386_JMP_SLOT strchr",	0);
	MakeStruct	(0X8048680,	"Elf32_Rel");
	set_cmt	(0X8048688,	"R_386_JMP_SLOT strlen",	0);
	MakeStruct	(0X8048688,	"Elf32_Rel");
	set_cmt	(0X8048690,	"R_386_JMP_SLOT __libc_start_main",	0);
	MakeStruct	(0X8048690,	"Elf32_Rel");
	set_cmt	(0X8048698,	"R_386_JMP_SLOT fprintf",	0);
	MakeStruct	(0X8048698,	"Elf32_Rel");
	set_cmt	(0X80486A0,	"R_386_JMP_SLOT strcasecmp",	0);
	MakeStruct	(0X80486A0,	"Elf32_Rel");
	set_cmt	(0X80486A8,	"R_386_JMP_SLOT __isoc99_sscanf",	0);
	MakeStruct	(0X80486A8,	"Elf32_Rel");
	set_cmt	(0X80486B0,	"R_386_JMP_SLOT setvbuf",	0);
	MakeStruct	(0X80486B0,	"Elf32_Rel");
	set_cmt	(0X80486B8,	"R_386_JMP_SLOT fopen",	0);
	MakeStruct	(0X80486B8,	"Elf32_Rel");
	set_cmt	(0X80486C0,	"R_386_JMP_SLOT gmtime",	0);
	MakeStruct	(0X80486C0,	"Elf32_Rel");
	set_cmt	(0X80486C8,	"R_386_JMP_SLOT memset",	0);
	MakeStruct	(0X80486C8,	"Elf32_Rel");
	set_cmt	(0X80486D0,	"R_386_JMP_SLOT snprintf",	0);
	MakeStruct	(0X80486D0,	"Elf32_Rel");
	set_cmt	(0X80486D8,	"R_386_JMP_SLOT strncpy",	0);
	MakeStruct	(0X80486D8,	"Elf32_Rel");
	set_cmt	(0X80486E0,	"R_386_JMP_SLOT fileno",	0);
	MakeStruct	(0X80486E0,	"Elf32_Rel");
	set_cmt	(0X80486E8,	"R_386_JMP_SLOT strncasecmp",	0);
	MakeStruct	(0X80486E8,	"Elf32_Rel");
	set_cmt	(0X80486F0,	"R_386_JMP_SLOT vfprintf",	0);
	MakeStruct	(0X80486F0,	"Elf32_Rel");
	set_cmt	(0X80486F8,	"R_386_JMP_SLOT atoi",	0);
	MakeStruct	(0X80486F8,	"Elf32_Rel");
	set_cmt	(0X8048700,	"R_386_JMP_SLOT strncmp",	0);
	MakeStruct	(0X8048700,	"Elf32_Rel");
	set_cmt	(0X8048708,	"R_386_JMP_SLOT strspn",	0);
	MakeStruct	(0X8048708,	"Elf32_Rel");
	set_cmt	(0X8048710,	"R_386_JMP_SLOT strncat",	0);
	MakeStruct	(0X8048710,	"Elf32_Rel");
	create_insn	(0X8048718);
	set_name	(0X8048718,	".init_proc");
	create_insn	(x=0X8048719);
	op_hex		(x,	1);
	create_insn	(x=0X8048727);
	op_plain_offset	(x,	1,	0X804C000);
	op_plain_offset	(x,	129,	0X804C000);
	create_insn	(x=0X8048736);
	op_hex		(x,	1);
	make_array	(0X804873B,	0X5);
	create_insn	(0X8048740);
	make_array	(0X804874C,	0X4);
	create_insn	(0X8048750);
	create_insn	(0X8048756);
	create_insn	(0X8048760);
	create_insn	(0X8048766);
	create_insn	(0X8048770);
	create_insn	(0X8048776);
	create_insn	(0X8048780);
	create_insn	(0X8048786);
	create_insn	(0X8048790);
	create_insn	(0X8048796);
	create_insn	(0X80487A0);
	create_insn	(0X80487A6);
	create_insn	(0X80487B0);
	create_insn	(0X80487B6);
	create_insn	(0X80487C0);
	create_insn	(0X80487C6);
	create_insn	(0X80487D0);
	create_insn	(0X80487D6);
	create_insn	(0X80487E0);
	create_insn	(0X80487E6);
	create_insn	(0X80487F0);
	create_insn	(0X80487F6);
	create_insn	(0X8048800);
	create_insn	(0X8048806);
	create_insn	(0X8048810);
	create_insn	(0X8048816);
	create_insn	(0X8048820);
	create_insn	(0X8048826);
	create_insn	(0X8048830);
	create_insn	(0X8048836);
	create_insn	(0X8048840);
	set_name	(0X8048840,	"fprintf_0");
	create_insn	(0X8048846);
	create_insn	(0X8048850);
	create_insn	(0X8048856);
	create_insn	(0X8048860);
	create_insn	(0X8048866);
	create_insn	(0X8048870);
	create_insn	(0X8048876);
	create_insn	(0X8048880);
	create_insn	(0X8048886);
	create_insn	(0X8048890);
	create_insn	(0X8048896);
	create_insn	(0X80488A0);
	create_insn	(0X80488A6);
	create_insn	(0X80488B0);
	create_insn	(0X80488B6);
	create_insn	(0X80488C0);
	create_insn	(0X80488C6);
	create_insn	(0X80488D0);
	create_insn	(0X80488D6);
	create_insn	(0X80488E0);
	create_insn	(0X80488E6);
	create_insn	(0X80488F0);
	create_insn	(0X80488F6);
	create_insn	(0X8048900);
	create_insn	(0X8048906);
	create_insn	(0X8048910);
	create_insn	(0X8048916);
	create_insn	(0X8048920);
	create_insn	(0X8048926);
	create_insn	(0X8048930);
	create_insn	(0X8048936);
	create_insn	(0X8048940);
	set_name	(0X8048940,	"__gmon_start__");
	make_array	(0X8048946,	0X2);
	make_array	(0X8048948,	0X8);
	create_insn	(0X8048950);
	set_name	(0X8048950,	"start");
	create_insn	(x=0X8048955);
	op_hex		(x,	1);
	create_insn	(x=0X804895B);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X8048960);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X8048967);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	make_array	(0X8048972,	0XE);
	create_insn	(x=0X8048980);
	op_stkvar	(x,	1);
	make_array	(0X8048984,	0XC);
	create_insn	(x=0X8048990);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8048995);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80489AB);
	op_hex		(x,	1);
	create_insn	(x=0X80489AE);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X80489B5);
	op_hex		(x,	1);
	make_array	(0X80489BB,	0X5);
	create_insn	(x=0X80489C0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80489C5);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X80489CA);
	op_hex		(x,	1);
	create_insn	(x=0X80489CF);
	op_hex		(x,	1);
	create_insn	(x=0X80489D4);
	op_hex		(x,	1);
	create_insn	(x=0X80489E4);
	op_hex		(x,	1);
	create_insn	(x=0X80489E8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X80489EF);
	op_hex		(x,	1);
	make_array	(0X80489F5,	0XB);
	create_insn	(0X8048A00);
	create_insn	(x=0X8048A0C);
	op_hex		(x,	1);
	make_array	(0X8048A1E,	0X2);
	create_insn	(x=0X8048A20);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	make_array	(0X8048A2D,	0X3);
	create_insn	(0X8048A30);
	create_insn	(x=0X8048A3C);
	op_hex		(x,	1);
	create_insn	(x=0X8048A42);
	op_hex		(x,	1);
	create_insn	(0X8048A4B);
	create_insn	(x=0X8048A4E);
	op_hex		(x,	1);
	create_insn	(x=0X8048A62);
	op_hex		(x,	1);
	create_insn	(x=0X8048A76);
	op_hex		(x,	1);
	create_insn	(x=0X8048A8A);
	op_hex		(x,	1);
	create_insn	(x=0X8048A8D);
	op_hex		(x,	1);
	create_insn	(x=0X8048A97);
	op_hex		(x,	1);
	create_insn	(0X8048AB1);
	set_name	(0X8048AB1,	"main");
	create_insn	(x=0X8048AB5);
	op_hex		(x,	1);
	create_insn	(x=0X8048ABF);
	op_hex		(x,	1);
	create_insn	(x=0X8048AD1);
	op_hex		(x,	1);
	create_insn	(0X8048ADA);
	create_insn	(x=0X8048ADD);
	op_hex		(x,	1);
	create_insn	(x=0X8048AE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048AE3);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048AE6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048AEE);
	op_hex		(x,	1);
	create_insn	(x=0X8048AF2);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048AFB);
	op_hex		(x,	1);
	create_insn	(x=0X8048AFE);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048B01);
	op_stkvar	(x,	1);
	create_insn	(0X8048B06);
	create_insn	(x=0X8048B09);
	op_hex		(x,	1);
	create_insn	(x=0X8048B0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048B0F);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048B12);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048B1A);
	op_hex		(x,	1);
	create_insn	(x=0X8048B1E);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048B27);
	op_hex		(x,	1);
	create_insn	(x=0X8048B2A);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048B2D);
	op_stkvar	(x,	1);
	create_insn	(0X8048B32);
	create_insn	(x=0X8048B35);
	op_hex		(x,	1);
	create_insn	(x=0X8048B3D);
	op_hex		(x,	1);
	create_insn	(x=0X8048B40);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048B43);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048B46);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X8048B4B);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X8048B56);
	op_hex		(x,	1);
	create_insn	(x=0X8048B5E);
	op_hex		(x,	1);
	create_insn	(x=0X8048B61);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X8048B66);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X8048B71);
	op_hex		(x,	1);
	create_insn	(x=0X8048B7E);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X8048B88);
	op_hex		(x,	1);
	create_insn	(x=0X8048B8B);
	op_hex		(x,	1);
	create_insn	(x=0X8048B95);
	op_hex		(x,	1);
	create_insn	(x=0X8048B98);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048B9B);
	op_hex		(x,	1);
	create_insn	(x=0X8048B9E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048BA7);
	op_hex		(x,	1);
	create_insn	(x=0X8048BAB);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X8048BB2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048BBB);
	op_hex		(x,	1);
	create_insn	(x=0X8048BC3);
	op_hex		(x,	1);
	create_insn	(x=0X8048BC6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048BCA);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X8048BD5);
	op_hex		(x,	1);
	create_insn	(x=0X8048BD8);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048BE3);
	op_hex		(x,	1);
	create_insn	(x=0X8048BE6);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048BE9);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X8048BF4);
	op_hex		(x,	1);
	create_insn	(x=0X8048BF7);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048C02);
	op_hex		(x,	1);
	create_insn	(x=0X8048C05);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048C08);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X8048C13);
	op_hex		(x,	1);
	create_insn	(x=0X8048C20);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X8048C2A);
	op_hex		(x,	1);
	create_insn	(x=0X8048C37);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X8048C41);
	op_hex		(x,	1);
	create_insn	(0X8048C47);
	create_insn	(x=0X8048C4A);
	op_hex		(x,	1);
	create_insn	(x=0X8048C4D);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X8048C52);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048C55);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048C58);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048C60);
	op_hex		(x,	1);
	create_insn	(x=0X8048C68);
	op_hex		(x,	1);
	create_insn	(x=0X8048C6B);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048C6E);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048C71);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048C74);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048C77);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X8048C82);
	op_hex		(x,	1);
	create_insn	(x=0X8048C8A);
	op_hex		(x,	1);
	create_insn	(x=0X8048C8D);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048C90);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X8048C9B);
	op_hex		(x,	1);
	create_insn	(x=0X8048CA3);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X8048CA8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X8048CAD);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X8048CB8);
	op_hex		(x,	1);
	create_insn	(0X8048CBE);
	create_insn	(x=0X8048CC1);
	op_hex		(x,	1);
	create_insn	(x=0X8048CC4);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048CCB);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048CD2);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048CD9);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048CE0);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048CE7);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048CEE);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048CF5);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048CF8);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048D00);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048D09);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X8048D10);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048D13);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048D1D);
	op_stkvar	(x,	1);
	create_insn	(0X8048D33);
	create_insn	(x=0X8048D46);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048D4F);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048D52);
	op_hex		(x,	1);
	create_insn	(x=0X8048D57);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048D5A);
	op_hex		(x,	1);
	create_insn	(x=0X8048D5D);
	op_hex		(x,	1);
	create_insn	(x=0X8048D62);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048D65);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048D68);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048D6D);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048D73);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048D78);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048D7D);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048D83);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048D89);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048D8C);
	op_hex		(x,	1);
	create_insn	(x=0X8048D91);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048D94);
	op_hex		(x,	1);
	create_insn	(x=0X8048D97);
	op_hex		(x,	1);
	create_insn	(x=0X8048D9C);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048D9F);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048DA2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048DA7);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048DAD);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048DB2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048DB7);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048DBD);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048DC3);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048DC6);
	op_hex		(x,	1);
	create_insn	(x=0X8048DCB);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048DD0);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048DD3);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048DD6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048DDB);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048DE1);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048DE6);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048DEB);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048DF1);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048DF9);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048DFC);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048DFF);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048E03);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048E11);
	op_stkvar	(x,	1);
	create_insn	(0X8048E16);
	create_insn	(x=0X8048E19);
	op_hex		(x,	1);
	create_insn	(x=0X8048E1C);
	op_hex		(x,	1);
	create_insn	(x=0X8048E1F);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048E27);
	op_hex		(x,	1);
	create_insn	(x=0X8048E2A);
	op_hex		(x,	1);
	create_insn	(x=0X8048E33);
	op_hex		(x,	1);
	create_insn	(x=0X8048E36);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048E39);
	op_hex		(x,	1);
	create_insn	(x=0X8048E3C);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048E44);
	op_hex		(x,	1);
	create_insn	(x=0X8048E47);
	op_hex		(x,	1);
	create_insn	(x=0X8048E4B);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048E4E);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048E56);
	op_hex		(x,	1);
	create_insn	(x=0X8048E59);
	op_hex		(x,	1);
	create_insn	(x=0X8048E5C);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048E5F);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048E67);
	op_hex		(x,	1);
	create_insn	(x=0X8048E6F);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048E72);
	op_stkvar	(x,	1);
	create_insn	(0X8048E78);
	create_insn	(x=0X8048E7B);
	op_hex		(x,	1);
	create_insn	(x=0X8048E7E);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048E81);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048E89);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048E93);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048EA1);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048EAF);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048EB3);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048EBD);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048EC1);
	op_hex		(x,	1);
	create_insn	(x=0X8048EC4);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048ECC);
	op_hex		(x,	1);
	create_insn	(x=0X8048ECF);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048ED4);
	op_hex		(x,	1);
	create_insn	(x=0X8048ED7);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X8048EDC);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048EE4);
	op_hex		(x,	1);
	create_insn	(x=0X8048EE7);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048EEA);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048EED);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048EF2);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048EF7);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048EFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048EFF);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048F04);
	op_hex		(x,	1);
	create_insn	(x=0X8048F08);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048F0B);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048F13);
	op_hex		(x,	1);
	create_insn	(x=0X8048F21);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048F25);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048F32);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048F38);
	op_stkvar	(x,	1);
	create_insn	(0X8048F49);
	create_insn	(x=0X8048F4A);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048F4E);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048F52);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048F55);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048F5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048F65);
	op_stkvar	(x,	1);
	create_insn	(0X8048F76);
	create_insn	(0X8048F7D);
	create_insn	(x=0X8048F80);
	op_hex		(x,	1);
	create_insn	(x=0X8048F83);
	op_hex		(x,	1);
	create_insn	(x=0X8048F88);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048F90);
	op_hex		(x,	1);
	create_insn	(x=0X8048F93);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048F96);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048F9C);
	op_hex		(x,	1);
	create_insn	(x=0X8048F9F);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048FA7);
	op_hex		(x,	1);
	create_insn	(x=0X8048FAA);
	op_hex		(x,	1);
	create_insn	(x=0X8048FAD);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048FB1);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048FB9);
	op_hex		(x,	1);
	create_insn	(x=0X8048FBE);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048FC1);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048FC8);
	op_hex		(x,	1);
	create_insn	(x=0X8048FCB);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048FCF);
	op_stkvar	(x,	0);
	create_insn	(x=0X8048FD7);
	op_hex		(x,	1);
	create_insn	(x=0X8048FE5);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048FEB);
	op_stkvar	(x,	0);
	create_insn	(0X8048FF0);
	create_insn	(0X8048FF2);
	create_insn	(x=0X8048FF6);
	op_hex		(x,	1);
	create_insn	(x=0X8048FF9);
	op_stkvar	(x,	1);
	create_insn	(x=0X8048FFC);
	op_hex		(x,	1);
	create_insn	(x=0X8048FFF);
	op_stkvar	(x,	0);
	create_insn	(x=0X8049007);
	op_hex		(x,	1);
	create_insn	(x=0X8049011);
	op_hex		(x,	1);
	create_insn	(x=0X8049015);
	op_stkvar	(x,	0);
	create_insn	(x=0X8049018);
	op_stkvar	(x,	0);
	create_insn	(x=0X8049020);
	op_hex		(x,	1);
	create_insn	(x=0X8049028);
	op_stkvar	(x,	1);
	create_insn	(0X804902D);
	create_insn	(x=0X8049031);
	op_hex		(x,	1);
	create_insn	(x=0X8049034);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049037);
	op_hex		(x,	1);
	create_insn	(x=0X804903B);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X8049040);
	op_stkvar	(x,	0);
	create_insn	(x=0X8049048);
	op_hex		(x,	1);
	create_insn	(x=0X804904B);
	op_stkvar	(x,	1);
	create_insn	(x=0X804904E);
	op_hex		(x,	1);
	create_insn	(x=0X8049051);
	op_stkvar	(x,	0);
	create_insn	(x=0X8049059);
	op_hex		(x,	1);
	create_insn	(x=0X8049063);
	op_hex		(x,	1);
	create_insn	(x=0X8049067);
	op_stkvar	(x,	0);
	create_insn	(x=0X804906A);
	op_stkvar	(x,	0);
	create_insn	(x=0X8049072);
	op_hex		(x,	1);
	create_insn	(x=0X804907A);
	op_stkvar	(x,	1);
	create_insn	(0X804907F);
	create_insn	(x=0X8049082);
	op_hex		(x,	1);
	create_insn	(x=0X8049085);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049088);
	op_hex		(x,	1);
	create_insn	(x=0X804908C);
	op_stkvar	(x,	0);
	create_insn	(x=0X804908F);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X8049099);
	op_hex		(x,	1);
	create_insn	(x=0X804909C);
	op_stkvar	(x,	0);
	create_insn	(x=0X804909F);
	op_stkvar	(x,	0);
	create_insn	(x=0X80490A5);
	op_hex		(x,	1);
	create_insn	(x=0X80490A8);
	op_stkvar	(x,	0);
	create_insn	(x=0X80490AB);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X80490B5);
	op_hex		(x,	1);
	create_insn	(x=0X80490BA);
	op_stkvar	(x,	1);
	create_insn	(x=0X80490BD);
	op_hex		(x,	1);
	create_insn	(x=0X80490C0);
	op_stkvar	(x,	0);
	create_insn	(x=0X80490C4);
	op_stkvar	(x,	0);
	create_insn	(x=0X80490CC);
	op_hex		(x,	1);
	create_insn	(x=0X80490CF);
	op_stkvar	(x,	0);
	create_insn	(x=0X80490D2);
	op_stkvar	(x,	0);
	create_insn	(x=0X80490D8);
	op_hex		(x,	1);
	create_insn	(x=0X80490DB);
	op_stkvar	(x,	0);
	create_insn	(x=0X80490DE);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X80490E8);
	op_hex		(x,	1);
	create_insn	(x=0X80490ED);
	op_hex		(x,	1);
	create_insn	(x=0X80490F0);
	op_stkvar	(x,	0);
	create_insn	(x=0X80490F3);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X80490FD);
	op_hex		(x,	1);
	create_insn	(0X8049103);
	create_insn	(x=0X8049106);
	op_hex		(x,	1);
	create_insn	(x=0X8049109);
	op_stkvar	(x,	1);
	create_insn	(x=0X804910C);
	op_stkvar	(x,	0);
	create_insn	(x=0X804910F);
	op_stkvar	(x,	0);
	create_insn	(x=0X8049118);
	op_stkvar	(x,	1);
	create_insn	(x=0X804911B);
	op_stkvar	(x,	0);
	create_insn	(x=0X8049121);
	op_stkvar	(x,	0);
	create_insn	(x=0X8049129);
	op_hex		(x,	1);
	create_insn	(x=0X804912C);
	op_stkvar	(x,	0);
	create_insn	(x=0X804912F);
	op_stkvar	(x,	0);
	create_insn	(x=0X804913C);
	op_stkvar	(x,	1);
	create_insn	(x=0X804913F);
	op_stkvar	(x,	0);
	create_insn	(x=0X8049142);
	op_stkvar	(x,	1);
	create_insn	(x=0X8049145);
	op_stkvar	(x,	0);
	create_insn	(x=0X8049148);
	op_stkvar	(x,	0);
	create_insn	(x=0X804914E);
	op_stkvar	(x,	1);
	create_insn	(0X8049153);
	create_insn	(x=0X8049156);
	op_hex		(x,	1);
	create_insn	(x=0X804915C);
	op_hex		(x,	1);
	create_insn	(x=0X804915F);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X8049164);
	op_stkvar	(x,	0);
	create_insn	(x=0X804916C);
	op_hex		(x,	1);
	create_insn	(x=0X804916F);
	op_stkvar	(x,	0);
	create_insn	(x=0X8049172);
	op_stkvar	(x,	0);
	create_insn	(x=0X804917A);
	op_hex		(x,	1);
	create_insn	(x=0X804917D);
	op_stkvar	(x,	0);
	create_insn	(x=0X8049180);
	op_stkvar	(x,	0);
	create_insn	(x=0X8049183);
	op_stkvar	(x,	1);
	create_insn	(x=0X804918F);
	op_hex		(x,	1);
	create_insn	(x=0X8049192);
	op_stkvar	(x,	0);
	create_insn	(x=0X804919C);
	op_stkvar	(x,	1);
	create_insn	(x=0X80491A8);
	op_hex		(x,	1);
	create_insn	(x=0X80491AB);
	op_stkvar	(x,	0);
	create_insn	(x=0X80491AE);
	op_stkvar	(x,	0);
	create_insn	(x=0X80491B4);
	op_hex		(x,	1);
	create_insn	(x=0X80491B7);
	op_stkvar	(x,	0);
	create_insn	(x=0X80491BF);
	op_hex		(x,	1);
	create_insn	(0X80491C5);
	create_insn	(x=0X80491C8);
	op_hex		(x,	1);
	create_insn	(x=0X80491CB);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X80491D2);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X80491E1);
	op_hex		(x,	1);
	create_insn	(0X80491EB);
	set_cmt	(0X80491ED,	"Keypatch modified this from:\n  jnz loc_8049A23\nKeypatch padded NOP to next boundary: 1 bytes",	0);
	create_byte	(0X80491F2);
	set_cmt	(0X80491F3,	"Trap to Debugger",	0);
	create_insn	(x=0X80491F3);
	op_hex		(x,	0);
	create_byte	(0X80491F4);
	create_insn	(0X80491F5);
	create_insn	(x=0X8049223);
	op_hex		(x,	1);
	create_insn	(x=0X8049238);
	op_hex		(x,	1);
	create_insn	(x=0X804923F);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X8049246);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X8049255);
	op_hex		(x,	1);
	create_insn	(x=0X8049262);
	op_hex		(x,	1);
	create_insn	(x=0X804926C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X8049276);
	op_hex		(x,	1);
	create_insn	(x=0X8049279);
	op_hex		(x,	1);
	create_insn	(x=0X8049291);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X80492A2);
	op_hex		(x,	1);
	create_insn	(x=0X80492AE);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X80492B5);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X80492C4);
	op_hex		(x,	1);
	create_insn	(x=0X80492D1);
	op_hex		(x,	1);
	create_insn	(x=0X80492D4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X80492E5);
	op_hex		(x,	1);
	create_insn	(x=0X80492F0);
	op_hex		(x,	1);
	create_insn	(x=0X80492F3);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X8049304);
	op_hex		(x,	1);
	create_insn	(x=0X804930F);
	op_hex		(x,	1);
	create_insn	(x=0X8049314);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X8049325);
	op_hex		(x,	1);
	create_insn	(x=0X8049338);
	op_hex		(x,	1);
	create_insn	(x=0X804933B);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X8049348);
	op_hex		(x,	1);
	create_insn	(x=0X804934E);
	op_hex		(x,	1);
	create_insn	(x=0X8049365);
	op_hex		(x,	1);
	create_insn	(x=0X804936D);
	op_hex		(x,	1);
	create_insn	(x=0X8049370);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X8049381);
	op_hex		(x,	1);
	create_insn	(x=0X8049391);
	op_hex		(x,	1);
	create_insn	(x=0X804939C);
	op_hex		(x,	1);
	create_insn	(x=0X80493A7);
	op_hex		(x,	1);
	create_insn	(x=0X80493AA);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X80493BB);
	op_hex		(x,	1);
	create_insn	(x=0X80493CB);
	op_hex		(x,	1);
	create_insn	(x=0X80493CE);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X80493DF);
	op_hex		(x,	1);
	create_insn	(x=0X80493F2);
	op_hex		(x,	1);
	create_insn	(x=0X80493F8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X8049402);
	op_hex		(x,	1);
	create_insn	(x=0X804940A);
	op_hex		(x,	1);
	create_insn	(x=0X804940D);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X804941E);
	op_hex		(x,	1);
	create_insn	(x=0X8049435);
	op_hex		(x,	1);
	create_insn	(x=0X804943B);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X8049445);
	op_hex		(x,	1);
	create_insn	(x=0X804944D);
	op_hex		(x,	1);
	create_insn	(x=0X8049450);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X8049461);
	op_hex		(x,	1);
	create_insn	(0X8049482);
	create_insn	(x=0X80494AA);
	op_hex		(x,	1);
	create_insn	(x=0X80494C0);
	op_hex		(x,	1);
	create_insn	(x=0X80494C3);
	op_hex		(x,	1);
	create_insn	(x=0X80494DA);
	op_hex		(x,	1);
	create_insn	(x=0X80494DD);
	op_hex		(x,	1);
	create_insn	(x=0X80494E7);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X80494F1);
	op_hex		(x,	1);
	create_insn	(x=0X80494F9);
	op_hex		(x,	1);
	create_insn	(x=0X80494FC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X804950D);
	op_hex		(x,	1);
	create_insn	(x=0X804951D);
	op_hex		(x,	1);
	create_insn	(x=0X8049520);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X804952D);
	op_hex		(x,	1);
	create_insn	(x=0X8049541);
	op_hex		(x,	1);
	create_insn	(x=0X804954E);
	op_hex		(x,	1);
	create_insn	(x=0X8049560);
	op_hex		(x,	1);
	create_insn	(x=0X8049577);
	op_hex		(x,	1);
	create_insn	(x=0X804957F);
	op_hex		(x,	1);
	create_insn	(x=0X8049594);
	op_hex		(x,	1);
	create_insn	(x=0X804959F);
	op_hex		(x,	1);
	create_insn	(x=0X80495A2);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X80495B3);
	op_hex		(x,	1);
	create_insn	(x=0X80495BA);
	op_hex		(x,	1);
	create_insn	(x=0X80495BD);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X80495CE);
	op_hex		(x,	1);
	create_insn	(x=0X80495D5);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X80495DC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X80495EB);
	op_hex		(x,	1);
	create_insn	(0X80495F8);
	create_insn	(x=0X8049603);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X804960A);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X8049619);
	op_hex		(x,	1);
	create_insn	(0X8049626);
	create_insn	(x=0X8049632);
	op_hex		(x,	1);
	create_insn	(x=0X804963D);
	op_hex		(x,	1);
	create_insn	(x=0X804964D);
	op_hex		(x,	1);
	create_insn	(x=0X8049650);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X804965D);
	op_hex		(x,	1);
	create_insn	(x=0X8049664);
	op_hex		(x,	1);
	create_insn	(x=0X8049669);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X8049676);
	op_hex		(x,	1);
	create_insn	(x=0X804967D);
	op_hex		(x,	1);
	create_insn	(x=0X8049680);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X804968D);
	op_hex		(x,	1);
	create_insn	(x=0X804969F);
	op_hex		(x,	1);
	create_insn	(x=0X80496A2);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X80496AD);
	op_hex		(x,	1);
	create_insn	(x=0X80496B4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X80496BB);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X80496CA);
	op_hex		(x,	1);
	create_insn	(0X80496D7);
	create_insn	(x=0X8049710);
	op_hex		(x,	1);
	create_insn	(x=0X8049713);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X804971F);
	op_hex		(x,	1);
	create_insn	(0X8049724);
	create_insn	(x=0X8049736);
	op_hex		(x,	1);
	create_insn	(x=0X8049739);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X8049745);
	op_hex		(x,	1);
	create_insn	(x=0X804974F);
	op_hex		(x,	1);
	create_insn	(x=0X804975C);
	op_hex		(x,	1);
	create_insn	(0X8049777);
	create_insn	(x=0X80497AA);
	op_hex		(x,	1);
	create_insn	(x=0X80497BC);
	op_hex		(x,	1);
	create_insn	(x=0X80497C3);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X80497CF);
	create_insn	(x=0X80497D4);
	op_hex		(x,	1);
	create_insn	(x=0X80497E4);
	op_hex		(x,	1);
	create_insn	(x=0X8049803);
	op_hex		(x,	1);
	create_insn	(x=0X804980D);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X8049817);
	op_hex		(x,	1);
	create_insn	(x=0X8049822);
	op_hex		(x,	1);
	create_insn	(x=0X8049825);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X8049836);
	op_hex		(x,	1);
	create_insn	(x=0X804983D);
	op_hex		(x,	1);
	create_insn	(x=0X8049840);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X8049851);
	op_hex		(x,	1);
	create_insn	(x=0X8049858);
	op_hex		(x,	1);
	create_insn	(x=0X804985B);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X804986C);
	op_hex		(x,	1);
	create_insn	(x=0X804987F);
	op_hex		(x,	1);
	create_insn	(x=0X8049888);
	op_hex		(x,	1);
	create_insn	(x=0X8049893);
	op_hex		(x,	1);
	create_insn	(x=0X80498A2);
	op_hex		(x,	1);
	create_insn	(0X80498B0);
	create_insn	(x=0X80498BA);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X80498C9);
	op_hex		(x,	1);
	create_insn	(x=0X80498DA);
	op_hex		(x,	1);
	create_insn	(x=0X80498F1);
	op_hex		(x,	1);
	create_insn	(x=0X80498F4);
	op_hex		(x,	1);
	create_insn	(x=0X80498F7);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X8049908);
	op_hex		(x,	1);
	create_insn	(x=0X8049913);
	op_hex		(x,	1);
	create_insn	(x=0X8049922);
	op_hex		(x,	1);
	create_insn	(x=0X8049954);
	op_hex		(x,	1);
	create_insn	(x=0X8049960);
	op_hex		(x,	1);
	create_insn	(x=0X8049971);
	op_hex		(x,	1);
	create_insn	(0X8049988);
	create_insn	(x=0X80499A9);
	op_hex		(x,	1);
	create_insn	(x=0X80499B3);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X80499BD);
	op_hex		(x,	1);
	create_insn	(x=0X80499CC);
	op_hex		(x,	1);
	create_insn	(x=0X80499D9);
	op_hex		(x,	1);
	create_insn	(0X80499DE);
	create_insn	(0X80499F1);
	create_insn	(0X80499F4);
	create_insn	(x=0X80499FE);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X8049A05);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X8049A14);
	op_hex		(x,	1);
	create_byte	(0X8049A21);
	make_array	(0X8049A21,	0X2);
	create_insn	(0X8049A23);
	create_insn	(x=0X8049A24);
	op_hex		(x,	1);
	set_cmt	(0X8049A28,	"Keypatch filled range [0x8049A28:0x8049A27] (0 bytes), replaced:\n  \nKeypatch modified this from:\n  jmp sub_804A310\n  align 10h\nKeypatch padded NOP to next boundary: 2 bytes",	0);
	create_insn	(x=0X8049A28);
	op_hex		(x,	1);
	set_cmt	(0X8049A2E,	"Keypatch modified this from:\n  nop\n  nop\n  push ebp\n  push edi\n  push esi",	0);
	create_insn	(0X8049A33);
	create_insn	(x=0X8049A3F);
	op_hex		(x,	1);
	create_insn	(x=0X8049A46);
	op_plain_offset	(x,	1,	0X804C000);
	op_plain_offset	(x,	129,	0X804C000);
	create_insn	(x=0X8049A51);
	op_plain_offset	(x,	1,	0X804C000);
	op_plain_offset	(x,	129,	0X804C000);
	create_insn	(x=0X8049A59);
	op_hex		(x,	1);
	create_insn	(x=0X8049A68);
	op_hex		(x,	1);
	create_insn	(x=0X8049A74);
	op_plain_offset	(x,	0,	0X804C000);
	op_plain_offset	(x,	128,	0X804C000);
	create_insn	(x=0X8049A7E);
	op_hex		(x,	1);
	create_insn	(x=0X8049A85);
	op_hex		(x,	1);
	make_array	(0X8049A8D,	0X3);
	create_insn	(0X8049A90);
	set_name	(0X8049A90,	"nullsub_1");
	make_array	(0X8049A92,	0X2);
	create_insn	(0X8049A94);
	set_name	(0X8049A94,	".term_proc");
	create_insn	(x=0X8049A95);
	op_hex		(x,	1);
	create_insn	(x=0X8049AA3);
	op_hex		(x,	1);
	set_name	(0X8049AAC,	"_IO_stdin_used");
	create_strlit	(0X8049AB0,	0X9);
	set_name	(0X8049AB0,	"aHttp11");
	create_strlit	(0X8049AB9,	0XB);
	set_name	(0X8049AB9,	"aSDS");
	create_strlit	(0X8049AC4,	0XF);
	set_name	(0X8049AC4,	"aXxEasyServer");
	create_strlit	(0X8049AD3,	0XD);
	set_name	(0X8049AD3,	"aServerS");
	create_strlit	(0X8049AE0,	0X1A);
	set_name	(0X8049AE0,	"aCacheControlNo");
	create_strlit	(0X8049AFA,	0X1A);
	set_name	(0X8049AFA,	"aADBYHMSGmt");
	create_strlit	(0X8049B14,	0XB);
	set_name	(0X8049B14,	"aDateS");
	create_strlit	(0X8049B1F,	0X5);
	set_name	(0X8049B1F,	"aS");
	create_strlit	(0X8049B24,	0X13);
	set_name	(0X8049B24,	"aContentTypeS");
	create_strlit	(0X8049B37,	0X14);
	set_name	(0X8049B37,	"aConnectionClos");
	create_strlit	(0X8049B4B,	0X3);
	create_strlit	(0X8049B4E,	0XA);
	set_name	(0X8049B4E,	"aTextHtml");
	create_strlit	(0X8049B58,	0X50);
	set_name	(0X8049B58,	"aHtmlHeadTitleD");
	create_strlit	(0X8049BA8,	0X4);
	set_name	(0X8049BA8,	"aS_0");
	create_strlit	(0X8049BAC,	0X17);
	set_name	(0X8049BAC,	"aHttpXxEasyServ");
	create_strlit	(0X8049BC4,	0X3C);
	set_name	(0X8049BC4,	"aHrAddressAHref");
	create_strlit	(0X8049C00,	0X2);
	create_byte	(0X8049C02);
	create_strlit	(0X8049C03,	0X6);
	set_name	(0X8049C03,	"aWebs");
	create_strlit	(0X8049C09,	0X17);
	set_name	(0X8049C09,	"aDirNotFoundRet");
	create_strlit	(0X8049C20,	0X1C);
	set_name	(0X8049C20,	"aCmsutlStrncatR");
	create_strlit	(0X8049C3C,	0X8);
	set_name	(0X8049C3C,	"aBufS");
	create_strlit	(0X8049C44,	0X7);
	set_name	(0X8049C44,	"aHtm");
	create_strlit	(0X8049C4B,	0X8);
	set_name	(0X8049C4B,	"aHtml");
	create_strlit	(0X8049C53,	0X7);
	set_name	(0X8049C53,	"aGif");
	create_strlit	(0X8049C5A,	0XA);
	set_name	(0X8049C5A,	"aImageGif");
	create_strlit	(0X8049C64,	0X7);
	set_name	(0X8049C64,	"aJpg");
	create_strlit	(0X8049C6B,	0XB);
	set_name	(0X8049C6B,	"aImageJpeg");
	create_strlit	(0X8049C76,	0X8);
	set_name	(0X8049C76,	"aJpeg");
	create_strlit	(0X8049C7E,	0X7);
	set_name	(0X8049C7E,	"aPng");
	create_strlit	(0X8049C85,	0XA);
	set_name	(0X8049C85,	"aImagePng");
	create_strlit	(0X8049C8F,	0X7);
	set_name	(0X8049C8F,	"aCss");
	create_strlit	(0X8049C96,	0X9);
	set_name	(0X8049C96,	"aTextCss");
	create_strlit	(0X8049C9F,	0X6);
	set_name	(0X8049C9F,	"aAu");
	create_strlit	(0X8049CA5,	0XC);
	set_name	(0X8049CA5,	"aAudioBasic");
	create_strlit	(0X8049CB1,	0X7);
	set_name	(0X8049CB1,	"aWav");
	create_strlit	(0X8049CB8,	0XA);
	set_name	(0X8049CB8,	"aAudioWav");
	create_strlit	(0X8049CC2,	0X7);
	set_name	(0X8049CC2,	"aAvi");
	create_strlit	(0X8049CC9,	0X10);
	set_name	(0X8049CC9,	"aVideoXMsvideo");
	create_strlit	(0X8049CD9,	0X7);
	set_name	(0X8049CD9,	"aMov");
	create_strlit	(0X8049CE0,	0X10);
	set_name	(0X8049CE0,	"aVideoQuicktime");
	create_strlit	(0X8049CF0,	0X8);
	set_name	(0X8049CF0,	"aMpeg");
	create_strlit	(0X8049CF8,	0XB);
	set_name	(0X8049CF8,	"aVideoMpeg");
	create_strlit	(0X8049D03,	0X8);
	set_name	(0X8049D03,	"aVrml");
	create_strlit	(0X8049D0B,	0XB);
	set_name	(0X8049D0B,	"aModelVrml");
	create_strlit	(0X8049D16,	0X8);
	set_name	(0X8049D16,	"aMidi");
	create_strlit	(0X8049D1E,	0XB);
	set_name	(0X8049D1E,	"aAudioMidi");
	create_strlit	(0X8049D29,	0X7);
	set_name	(0X8049D29,	"aMp3");
	create_strlit	(0X8049D30,	0XB);
	set_name	(0X8049D30,	"aAudioMpeg");
	create_strlit	(0X8049D3B,	0X7);
	set_name	(0X8049D3B,	"aPac");
	make_array	(0X8049D42,	0X2);
	create_strlit	(0X8049D44,	0X22);
	set_name	(0X8049D44,	"aApplicationXNs");
	create_strlit	(0X8049D66,	0X2);
	set_name	(0X8049D66,	"aR");
	create_strlit	(0X8049D68,	0XB);
	set_name	(0X8049D68,	"aForbidden");
	create_strlit	(0X8049D73,	0XA);
	set_name	(0X8049D73,	"aForbidden_0");
	create_strlit	(0X8049D7D,	0X12);
	set_name	(0X8049D7D,	"aNoRequestFound");
	create_strlit	(0X8049D8F,	0XC);
	set_name	(0X8049D8F,	"aBadRequest");
	create_strlit	(0X8049D9B,	0X9);
	set_name	(0X8049D9B,	"aLineS");
	create_strlit	(0X8049DA4,	0X12);
	create_strlit	(0X8049DB6,	0X15);
	set_name	(0X8049DB6,	"aCanTParseReque");
	create_strlit	(0X8049DCB,	0X2);
	create_strlit	(0X8049DCD,	0XF);
	set_name	(0X8049DCD,	"aAuthorization");
	create_strlit	(0X8049DDC,	0X3);
	create_strlit	(0X8049DDF,	0X10);
	set_name	(0X8049DDF,	"aContentLength");
	create_strlit	(0X8049DEF,	0X9);
	set_name	(0X8049DEF,	"aReferer");
	create_strlit	(0X8049DF8,	0X8);
	set_name	(0X8049DF8,	"aUpload");
	create_strlit	(0X8049E00,	0X2A);
	set_name	(0X8049E00,	"aRefererUploadD");
	create_strlit	(0X8049E2A,	0X10);
	set_name	(0X8049E2A,	"aUpdatesettings");
	make_array	(0X8049E3A,	0X2);
	create_strlit	(0X8049E3C,	0X33);
	set_name	(0X8049E3C,	"aRefererUpdateS");
	create_strlit	(0X8049E6F,	0XA);
	set_name	(0X8049E6F,	"aBoundary");
	create_strlit	(0X8049E79,	0X10);
	set_name	(0X8049E79,	"aGlbboundaryS");
	create_strlit	(0X8049E89,	0X6);
	set_name	(0X8049E89,	"aHost");
	create_strlit	(0X8049E8F,	0X4);
	set_name	(0X8049E8F,	"aGet");
	create_strlit	(0X8049E93,	0X5);
	set_name	(0X8049E93,	"aPost");
	create_strlit	(0X8049E98,	0X20);
	set_name	(0X8049E98,	"aThatMethodIsNo");
	create_strlit	(0X8049EB8,	0X10);
	set_name	(0X8049EB8,	"aNotImplemented");
	create_strlit	(0X8049EC8,	0XE);
	set_name	(0X8049EC8,	"aBadFilename");
	create_strlit	(0X8049ED6,	0X3);
	create_strlit	(0X8049ED9,	0X4);
	create_strlit	(0X8049EDD,	0X5);
	create_strlit	(0X8049EE2,	0X4);
	create_strlit	(0X8049EE6,	0X12);
	set_name	(0X8049EE6,	"aIllegalFilenam");
	create_strlit	(0X8049EF8,	0XC);
	set_name	(0X8049EF8,	"aQsmainHtml");
	create_strlit	(0X8049F04,	0XB);
	set_name	(0X8049F04,	"aIndexHtml");
	create_strlit	(0X8049F0F,	0XA);
	set_name	(0X8049F0F,	"aEasyAuth");
	create_strlit	(0X8049F19,	0XC);
	set_name	(0X8049F19,	"aUploadCgi");
	create_strlit	(0X8049F25,	0X14);
	set_name	(0X8049F25,	"aUploadsettings");
	create_strlit	(0X8049F39,	0X3);
	set_name	(0X8049F39,	"aOk");
	create_strlit	(0X8049F3C,	0X14);
	set_name	(0X8049F3C,	"aHandlerOutputS");
	create_strlit	(0X8049F50,	0X10);
	set_name	(0X8049F50,	"aFileNotFound");
	create_strlit	(0X8049F60,	0XA);
	set_name	(0X8049F60,	"aNotFound");
	make_array	(0X8049F6A,	0X2);
	create_insn	(0X804A2F0);
	create_insn	(0X804A2F2);
	create_insn	(0X804A2F4);
	create_dword	(0X804A300);
	make_array	(0X804A300,	0X4);
	create_insn	(x=0X804A310);
	op_hex		(x,	1);
	create_dword	(0X804A31C);
	make_array	(0X804A31C,	0X2FB);
	update_extra_cmt		(0X804BF08,	E_PREV + 0,	"; ELF Initialization Function Table");
	create_dword	(x=0X804BF08);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X804BF08,	"funcs_8049A74");
	update_extra_cmt		(0X804BF0C,	E_PREV + 0,	"; ELF Termination Function Table");
	create_dword	(x=0X804BF0C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X804BF14,	"DT_NEEDED libc.so.6",	0);
	update_extra_cmt		(0X804BF14,	E_PREV + 0,	"; ELF Dynamic Information");
	MakeStruct	(0X804BF14,	"Elf32_Dyn");
	set_cmt	(0X804BF1C,	"DT_INIT ",	0);
	MakeStruct	(0X804BF1C,	"Elf32_Dyn");
	set_cmt	(0X804BF24,	"DT_FINI ",	0);
	MakeStruct	(0X804BF24,	"Elf32_Dyn");
	set_cmt	(0X804BF2C,	"DT_INIT_ARRAY ",	0);
	MakeStruct	(0X804BF2C,	"Elf32_Dyn");
	set_cmt	(0X804BF34,	"DT_INIT_ARRAYSZ ",	0);
	MakeStruct	(0X804BF34,	"Elf32_Dyn");
	set_cmt	(0X804BF3C,	"DT_FINI_ARRAY ",	0);
	MakeStruct	(0X804BF3C,	"Elf32_Dyn");
	set_cmt	(0X804BF44,	"DT_FINI_ARRAYSZ ",	0);
	MakeStruct	(0X804BF44,	"Elf32_Dyn");
	set_cmt	(0X804BF4C,	"DT_GNU_HASH ",	0);
	MakeStruct	(0X804BF4C,	"Elf32_Dyn");
	set_cmt	(0X804BF54,	"DT_STRTAB ",	0);
	MakeStruct	(0X804BF54,	"Elf32_Dyn");
	set_cmt	(0X804BF5C,	"DT_SYMTAB ",	0);
	MakeStruct	(0X804BF5C,	"Elf32_Dyn");
	set_cmt	(0X804BF64,	"DT_STRSZ ",	0);
	MakeStruct	(0X804BF64,	"Elf32_Dyn");
	set_cmt	(0X804BF6C,	"DT_SYMENT ",	0);
	MakeStruct	(0X804BF6C,	"Elf32_Dyn");
	set_cmt	(0X804BF74,	"DT_DEBUG ",	0);
	MakeStruct	(0X804BF74,	"Elf32_Dyn");
	set_cmt	(0X804BF7C,	"DT_PLTGOT ",	0);
	MakeStruct	(0X804BF7C,	"Elf32_Dyn");
	set_cmt	(0X804BF84,	"DT_PLTRELSZ ",	0);
	MakeStruct	(0X804BF84,	"Elf32_Dyn");
	set_cmt	(0X804BF8C,	"DT_PLTREL ",	0);
	MakeStruct	(0X804BF8C,	"Elf32_Dyn");
	set_cmt	(0X804BF94,	"DT_JMPREL ",	0);
	MakeStruct	(0X804BF94,	"Elf32_Dyn");
	set_cmt	(0X804BF9C,	"DT_REL ",	0);
	MakeStruct	(0X804BF9C,	"Elf32_Dyn");
	set_cmt	(0X804BFA4,	"DT_RELSZ ",	0);
	MakeStruct	(0X804BFA4,	"Elf32_Dyn");
	set_cmt	(0X804BFAC,	"DT_RELENT ",	0);
	MakeStruct	(0X804BFAC,	"Elf32_Dyn");
	set_cmt	(0X804BFB4,	"DT_VERNEED ",	0);
	MakeStruct	(0X804BFB4,	"Elf32_Dyn");
	set_cmt	(0X804BFBC,	"DT_VERNEEDNUM ",	0);
	MakeStruct	(0X804BFBC,	"Elf32_Dyn");
	set_cmt	(0X804BFC4,	"DT_VERSYM ",	0);
	MakeStruct	(0X804BFC4,	"Elf32_Dyn");
	set_cmt	(0X804BFCC,	"DT_NULL ",	0);
	MakeStruct	(0X804BFCC,	"Elf32_Dyn");
	create_dword	(x=0X804BFFC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X804BFFC,	"__gmon_start___ptr");
	create_dword	(x=0X804C000);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	make_array	(0X804C088,	0X18);
	make_array	(0X804C0A0,	0X20);
	create_dword	(0X804C0C0);
	create_dword	(x=0X804C4C0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X804C4C4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	make_array	(0X804C4C8,	0X8);
	create_dword	(x=0X804C4D0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	make_array	(0X804C4D4,	0X4);
	create_dword	(x=0X804C4D8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X804C4DC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X804C660,	"Copy of shared data",	0);
	create_dword	(0X804C660);
	set_name	(0X804C660,	"stderr");
	make_array	(0X804C664,	0X1C);
	set_cmt	(0X804C680,	"Copy of shared data",	0);
	create_dword	(0X804C680);
	set_name	(0X804C680,	"stdin");
	set_cmt	(0X804C684,	"Copy of shared data",	0);
	create_dword	(0X804C684);
	set_name	(0X804C684,	"stdout");
	create_byte	(0X804C688);
	create_byte	(0X804C689);
	make_array	(0X804C68A,	0X2);
	create_dword	(0X804C68C);
	create_dword	(0X804C690);
	create_dword	(0X804C6D8);
	create_dword	(0X804C6DC);
	create_dword	(x=0X804C6E0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X804C6E4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X804C6E8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X804C6EC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X804C6F0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X804C6F4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X804C6F8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X804C6FC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X804C700);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X804C704);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X804C708);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X804C70C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X804C710);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X804C714);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X804C718);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X804C71C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X804C720);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X804C724);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X804C728);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X804C72C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X804C730);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X804C734);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X804C738);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X804C73C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X804C740);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X804C744);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X804C748);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X804C74C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X804C750);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X804C754);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X804C758);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X804D658);
	set_name	(0X804D658,	"strstr");
	create_insn	(0X804D65C);
	set_name	(0X804D65C,	"strcmp");
	create_insn	(0X804D660);
	set_name	(0X804D660,	"strcspn");
	create_insn	(0X804D664);
	set_name	(0X804D664,	"fgets");
	create_insn	(0X804D668);
	set_name	(0X804D668,	"fclose");
	create_insn	(0X804D66C);
	set_name	(0X804D66C,	"time");
	create_insn	(0X804D670);
	set_name	(0X804D670,	"alarm");
	create_insn	(0X804D674);
	set_name	(0X804D674,	"fwrite");
	create_insn	(0X804D678);
	set_name	(0X804D678,	"fread");
	create_insn	(0X804D67C);
	set_name	(0X804D67C,	"strcpy");
	create_insn	(0X804D680);
	set_name	(0X804D680,	"malloc");
	create_insn	(0X804D684);
	set_name	(0X804D684,	"strftime");
	create_insn	(0X804D688);
	set_name	(0X804D688,	"strchr");
	create_insn	(0X804D68C);
	set_name	(0X804D68C,	"strlen");
	create_insn	(0X804D690);
	set_name	(0X804D690,	"__libc_start_main");
	create_insn	(0X804D694);
	set_name	(0X804D694,	"fprintf");
	create_insn	(0X804D698);
	set_name	(0X804D698,	"strcasecmp");
	create_insn	(0X804D69C);
	set_name	(0X804D69C,	"__isoc99_sscanf");
	create_insn	(0X804D6A0);
	set_name	(0X804D6A0,	"setvbuf");
	create_insn	(0X804D6A4);
	set_name	(0X804D6A4,	"fopen");
	create_insn	(0X804D6A8);
	set_name	(0X804D6A8,	"gmtime");
	create_insn	(0X804D6AC);
	set_name	(0X804D6AC,	"memset");
	create_insn	(0X804D6B0);
	set_name	(0X804D6B0,	"snprintf");
	create_insn	(0X804D6B4);
	set_name	(0X804D6B4,	"strncpy");
	create_insn	(0X804D6B8);
	set_name	(0X804D6B8,	"fileno");
	create_insn	(0X804D6BC);
	set_name	(0X804D6BC,	"strncasecmp");
	create_insn	(0X804D6C0);
	set_name	(0X804D6C0,	"vfprintf");
	create_insn	(0X804D6C4);
	set_name	(0X804D6C4,	"atoi");
	create_insn	(0X804D6C8);
	set_name	(0X804D6C8,	"strncmp");
	create_insn	(0X804D6CC);
	set_name	(0X804D6CC,	"strspn");
	create_insn	(0X804D6D0);
	set_name	(0X804D6D0,	"strncat");
	create_insn	(0X804D6D4);
	set_name	(0X804D6D4,	"__imp___gmon_start__");
}

static Functions_0(void) {

	add_func    (0X8048718,0X804873B);
	set_func_flags(0X8048718,0x5400);
	set_frame_size(0X8048718, 0XC, 0, 0);
	add_func    (0X8048740,0X804874C);
	set_func_flags(0X8048740,0x1400);
	add_func    (0X8048750,0X8048756);
	set_func_flags(0X8048750,0x1480);
	add_func    (0X8048756,0X8048760);
	set_func_flags(0X8048756,0x1400);
	add_func    (0X8048760,0X8048766);
	set_func_flags(0X8048760,0x1480);
	add_func    (0X8048766,0X8048770);
	set_func_flags(0X8048766,0x1400);
	add_func    (0X8048770,0X8048776);
	set_func_flags(0X8048770,0x1480);
	add_func    (0X8048776,0X8048780);
	set_func_flags(0X8048776,0x1400);
	add_func    (0X8048780,0X8048786);
	set_func_flags(0X8048780,0x1480);
	add_func    (0X8048786,0X8048790);
	set_func_flags(0X8048786,0x1400);
	add_func    (0X8048790,0X8048796);
	set_func_flags(0X8048790,0x1480);
	add_func    (0X8048796,0X80487A0);
	set_func_flags(0X8048796,0x1400);
	add_func    (0X80487A0,0X80487A6);
	set_func_flags(0X80487A0,0x1480);
	add_func    (0X80487A6,0X80487B0);
	set_func_flags(0X80487A6,0x1400);
	add_func    (0X80487B0,0X80487B6);
	set_func_flags(0X80487B0,0x1480);
	add_func    (0X80487B6,0X80487C0);
	set_func_flags(0X80487B6,0x1400);
	add_func    (0X80487C0,0X80487C6);
	set_func_flags(0X80487C0,0x1480);
	add_func    (0X80487C6,0X80487D0);
	set_func_flags(0X80487C6,0x1400);
	add_func    (0X80487D0,0X80487D6);
	set_func_flags(0X80487D0,0x1480);
	add_func    (0X80487D6,0X80487E0);
	set_func_flags(0X80487D6,0x1400);
	add_func    (0X80487E0,0X80487E6);
	set_func_flags(0X80487E0,0x1480);
	add_func    (0X80487E6,0X80487F0);
	set_func_flags(0X80487E6,0x1400);
	add_func    (0X80487F0,0X80487F6);
	set_func_flags(0X80487F0,0x1480);
	add_func    (0X80487F6,0X8048800);
	set_func_flags(0X80487F6,0x1400);
	add_func    (0X8048800,0X8048806);
	set_func_flags(0X8048800,0x1480);
	add_func    (0X8048806,0X8048810);
	set_func_flags(0X8048806,0x1400);
	add_func    (0X8048810,0X8048816);
	set_func_flags(0X8048810,0x1480);
	add_func    (0X8048816,0X8048820);
	set_func_flags(0X8048816,0x1400);
	add_func    (0X8048820,0X8048826);
	set_func_flags(0X8048820,0x1480);
	add_func    (0X8048826,0X8048830);
	set_func_flags(0X8048826,0x1400);
	add_func    (0X8048830,0X8048836);
	set_func_flags(0X8048830,0x1480);
	add_func    (0X8048836,0X8048840);
	set_func_flags(0X8048836,0x1400);
	add_func    (0X8048840,0X8048846);
	set_func_flags(0X8048840,0x1480);
	add_func    (0X8048846,0X8048850);
	set_func_flags(0X8048846,0x1400);
	add_func    (0X8048850,0X8048856);
	set_func_flags(0X8048850,0x1480);
	add_func    (0X8048856,0X8048860);
	set_func_flags(0X8048856,0x1400);
	add_func    (0X8048860,0X8048866);
	set_func_flags(0X8048860,0x1480);
	add_func    (0X8048866,0X8048870);
	set_func_flags(0X8048866,0x1400);
	add_func    (0X8048870,0X8048876);
	set_func_flags(0X8048870,0x1480);
	add_func    (0X8048876,0X8048880);
	set_func_flags(0X8048876,0x1400);
	add_func    (0X8048880,0X8048886);
	set_func_flags(0X8048880,0x1480);
	add_func    (0X8048886,0X8048890);
	set_func_flags(0X8048886,0x1400);
	add_func    (0X8048890,0X8048896);
	set_func_flags(0X8048890,0x1480);
	add_func    (0X8048896,0X80488A0);
	set_func_flags(0X8048896,0x1400);
	add_func    (0X80488A0,0X80488A6);
	set_func_flags(0X80488A0,0x1480);
	add_func    (0X80488A6,0X80488B0);
	set_func_flags(0X80488A6,0x1400);
	add_func    (0X80488B0,0X80488B6);
	set_func_flags(0X80488B0,0x1480);
	add_func    (0X80488B6,0X80488C0);
	set_func_flags(0X80488B6,0x1400);
	add_func    (0X80488C0,0X80488C6);
	set_func_flags(0X80488C0,0x1480);
	add_func    (0X80488C6,0X80488D0);
	set_func_flags(0X80488C6,0x1400);
	add_func    (0X80488D0,0X80488D6);
	set_func_flags(0X80488D0,0x1480);
	add_func    (0X80488D6,0X80488E0);
	set_func_flags(0X80488D6,0x1400);
	add_func    (0X80488E0,0X80488E6);
	set_func_flags(0X80488E0,0x1480);
	add_func    (0X80488E6,0X80488F0);
	set_func_flags(0X80488E6,0x1400);
	add_func    (0X80488F0,0X80488F6);
	set_func_flags(0X80488F0,0x1480);
	add_func    (0X80488F6,0X8048900);
	set_func_flags(0X80488F6,0x1400);
	add_func    (0X8048900,0X8048906);
	set_func_flags(0X8048900,0x1480);
	add_func    (0X8048906,0X8048910);
	set_func_flags(0X8048906,0x1400);
	add_func    (0X8048910,0X8048916);
	set_func_flags(0X8048910,0x1480);
	add_func    (0X8048916,0X8048920);
	set_func_flags(0X8048916,0x1400);
	add_func    (0X8048920,0X8048926);
	set_func_flags(0X8048920,0x1480);
	add_func    (0X8048926,0X8048930);
	set_func_flags(0X8048926,0x1400);
	add_func    (0X8048930,0X8048936);
	set_func_flags(0X8048930,0x1480);
	add_func    (0X8048936,0X8048940);
	set_func_flags(0X8048936,0x1400);
	add_func    (0X8048940,0X8048946);
	set_func_flags(0X8048940,0x14c0);
	add_func    (0X8048950,0X8048972);
	set_func_flags(0X8048950,0x1c01);
	add_func    (0X8048980,0X8048984);
	set_func_flags(0X8048980,0x5400);
	set_frame_size(0X8048980, 0, 0, 0);
	add_func    (0X8048990,0X80489BB);
	set_func_flags(0X8048990,0x5400);
	set_frame_size(0X8048990, 0, 0, 0);
	add_func    (0X8048A00,0X8048A1E);
	set_func_flags(0X8048A00,0x5400);
	set_frame_size(0X8048A00, 0, 0, 0);
	add_func    (0X8048A20,0X8048A4B);
	set_func_flags(0X8048A20,0x5400);
	set_frame_size(0X8048A20, 0, 0, 0);
	add_func    (0X8048A4B,0X8048AB1);
	set_func_flags(0X8048A4B,0x5410);
	set_frame_size(0X8048A4B, 0X8, 4, 0);
	add_func    (0X8048AB1,0X8048ADA);
	set_func_flags(0X8048AB1,0x5c10);
	SetType(0X8048AB1, "int __cdecl main(int argc, const char **argv, const char **envp);");
	set_frame_size(0X8048AB1, 0X8, 4, 0);
	define_local_var(0X8048AB1, 0X8048ADA, "[bp+0X8]", "argc");
	define_local_var(0X8048AB1, 0X8048ADA, "[bp+0XC]", "argv");
	define_local_var(0X8048AB1, 0X8048ADA, "[bp+0X10]", "envp");
	add_func    (0X8048ADA,0X8048B06);
	set_func_flags(0X8048ADA,0x5410);
	set_frame_size(0X8048ADA, 0X18, 4, 0);
	add_func    (0X8048B06,0X8048B32);
	set_func_flags(0X8048B06,0x5410);
	set_frame_size(0X8048B06, 0X18, 4, 0);
	add_func    (0X8048B32,0X8048C47);
	set_func_flags(0X8048B32,0x5410);
	set_frame_size(0X8048B32, 0X78, 4, 0);
	add_func    (0X8048C47,0X8048CBE);
	set_func_flags(0X8048C47,0x5410);
	set_frame_size(0X8048C47, 0X8, 4, 0);
	add_func    (0X8048CBE,0X8048E16);
	set_func_flags(0X8048CBE,0x5410);
	set_frame_size(0X8048CBE, 0X20, 4, 0);
	add_func    (0X8048E16,0X8048E78);
	set_func_flags(0X8048E16,0x5410);
	set_frame_size(0X8048E16, 0X18, 4, 0);
	add_func    (0X8048E78,0X8048F7D);
	set_func_flags(0X8048E78,0x5410);
	set_frame_size(0X8048E78, 0X18, 4, 0);
	add_func    (0X8048F7D,0X8048FF2);
	set_func_flags(0X8048F7D,0x5410);
	set_frame_size(0X8048F7D, 0X18, 4, 0);
	add_func    (0X8048FF2,0X804902D);
	set_func_flags(0X8048FF2,0x5410);
	set_frame_size(0X8048FF2, 0X8, 4, 0);
	add_func    (0X804902D,0X804907F);
	set_func_flags(0X804902D,0x5410);
	set_frame_size(0X804902D, 0X8, 4, 0);
	add_func    (0X804907F,0X8049103);
	set_func_flags(0X804907F,0x5410);
	set_frame_size(0X804907F, 0X18, 4, 0);
	add_func    (0X8049103,0X8049153);
	set_func_flags(0X8049103,0x5410);
	set_frame_size(0X8049103, 0X18, 4, 0);
	add_func    (0X8049153,0X80491C5);
	set_func_flags(0X8049153,0x5410);
	set_frame_size(0X8049153, 0X418, 4, 0);
	add_func    (0X80491C5,0X80491EB);
	set_func_flags(0X80491C5,0x5410);
	set_frame_size(0X80491C5, 0X8, 4, 0);
	add_func    (0X80491EB,0X8049A2E);
	set_func_flags(0X80491EB,0x5400);
	set_frame_size(0X80491EB, 0X4, 0, 0);
	add_func    (0X8049A90,0X8049A92);
	set_func_flags(0X8049A90,0x5440);
	set_frame_size(0X8049A90, 0, 0, 0);
	add_func    (0X8049A94,0X8049AA8);
	set_func_flags(0X8049A94,0x5400);
	set_frame_size(0X8049A94, 0XC, 0, 0);
	add_func    (0X804A310,0X804A31B);
	set_func_flags(0X804A310,0x1400);
	set_frame_size(0X804A310, 0X112C4, 0, 0);
	add_func    (0X804D658,0X804D65C);
	set_func_flags(0X804D658,0x5400);
	SetType(0X804D658, "char *strstr(const char *haystack, const char *needle);");
	set_frame_size(0X804D658, 0, 0, 0);
	add_func    (0X804D65C,0X804D660);
	set_func_flags(0X804D65C,0x5400);
	SetType(0X804D65C, "int strcmp(const char *s1, const char *s2);");
	set_frame_size(0X804D65C, 0, 0, 0);
	add_func    (0X804D660,0X804D664);
	set_func_flags(0X804D660,0x5400);
	SetType(0X804D660, "size_t strcspn(const char *s, const char *reject);");
	set_frame_size(0X804D660, 0, 0, 0);
	add_func    (0X804D664,0X804D668);
	set_func_flags(0X804D664,0x5400);
	SetType(0X804D664, "char *fgets(char *s, int n, FILE *stream);");
	set_frame_size(0X804D664, 0, 0, 0);
	add_func    (0X804D668,0X804D66C);
	set_func_flags(0X804D668,0x5400);
	SetType(0X804D668, "int fclose(FILE *stream);");
	set_frame_size(0X804D668, 0, 0, 0);
	add_func    (0X804D66C,0X804D670);
	set_func_flags(0X804D66C,0x5400);
	SetType(0X804D66C, "time_t time(time_t *timer);");
	set_frame_size(0X804D66C, 0, 0, 0);
	add_func    (0X804D670,0X804D674);
	set_func_flags(0X804D670,0x5400);
	SetType(0X804D670, "unsigned int alarm(unsigned int seconds);");
	set_frame_size(0X804D670, 0, 0, 0);
	add_func    (0X804D674,0X804D678);
	set_func_flags(0X804D674,0x5400);
	SetType(0X804D674, "size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s);");
	set_frame_size(0X804D674, 0, 0, 0);
	add_func    (0X804D678,0X804D67C);
	set_func_flags(0X804D678,0x5400);
	SetType(0X804D678, "size_t fread(void *ptr, size_t size, size_t n, FILE *stream);");
	set_frame_size(0X804D678, 0, 0, 0);
	add_func    (0X804D67C,0X804D680);
	set_func_flags(0X804D67C,0x5400);
	SetType(0X804D67C, "char *strcpy(char *dest, const char *src);");
	set_frame_size(0X804D67C, 0, 0, 0);
	add_func    (0X804D680,0X804D684);
	set_func_flags(0X804D680,0x5400);
	SetType(0X804D680, "void *malloc(size_t size);");
	set_frame_size(0X804D680, 0, 0, 0);
	add_func    (0X804D684,0X804D688);
	set_func_flags(0X804D684,0x5400);
	SetType(0X804D684, "size_t strftime(char *s, size_t maxsize, const char *format, const struct tm *tp);");
	set_frame_size(0X804D684, 0, 0, 0);
	add_func    (0X804D688,0X804D68C);
	set_func_flags(0X804D688,0x5400);
	SetType(0X804D688, "char *strchr(const char *s, int c);");
	set_frame_size(0X804D688, 0, 0, 0);
	add_func    (0X804D68C,0X804D690);
	set_func_flags(0X804D68C,0x5400);
	SetType(0X804D68C, "size_t strlen(const char *s);");
	set_frame_size(0X804D68C, 0, 0, 0);
	add_func    (0X804D690,0X804D694);
	set_func_flags(0X804D690,0x5400);
	SetType(0X804D690, "int __cdecl _libc_start_main(int (__cdecl *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end);");
	set_frame_size(0X804D690, 0, 0, 0);
	add_func    (0X804D694,0X804D698);
	set_func_flags(0X804D694,0x5400);
	SetType(0X804D694, "int fprintf(FILE *stream, const char *format, ...);");
	set_frame_size(0X804D694, 0, 0, 0);
	add_func    (0X804D698,0X804D69C);
	set_func_flags(0X804D698,0x5400);
	SetType(0X804D698, "int strcasecmp(const char *s1, const char *s2);");
	set_frame_size(0X804D698, 0, 0, 0);
	add_func    (0X804D69C,0X804D6A0);
	set_func_flags(0X804D69C,0x1400);
	add_func    (0X804D6A0,0X804D6A4);
	set_func_flags(0X804D6A0,0x5400);
	SetType(0X804D6A0, "int setvbuf(FILE *stream, char *buf, int modes, size_t n);");
	set_frame_size(0X804D6A0, 0, 0, 0);
	add_func    (0X804D6A4,0X804D6A8);
	set_func_flags(0X804D6A4,0x5400);
	SetType(0X804D6A4, "FILE *fopen(const char *filename, const char *modes);");
	set_frame_size(0X804D6A4, 0, 0, 0);
	add_func    (0X804D6A8,0X804D6AC);
	set_func_flags(0X804D6A8,0x5400);
	SetType(0X804D6A8, "struct tm *gmtime(const time_t *timer);");
	set_frame_size(0X804D6A8, 0, 0, 0);
	add_func    (0X804D6AC,0X804D6B0);
	set_func_flags(0X804D6AC,0x5400);
	SetType(0X804D6AC, "void *memset(void *s, int c, size_t n);");
	set_frame_size(0X804D6AC, 0, 0, 0);
	add_func    (0X804D6B0,0X804D6B4);
	set_func_flags(0X804D6B0,0x5400);
	SetType(0X804D6B0, "int snprintf(char *s, size_t maxlen, const char *format, ...);");
	set_frame_size(0X804D6B0, 0, 0, 0);
	add_func    (0X804D6B4,0X804D6B8);
	set_func_flags(0X804D6B4,0x5400);
	SetType(0X804D6B4, "char *strncpy(char *dest, const char *src, size_t n);");
	set_frame_size(0X804D6B4, 0, 0, 0);
	add_func    (0X804D6B8,0X804D6BC);
	set_func_flags(0X804D6B8,0x5400);
	SetType(0X804D6B8, "int fileno(FILE *stream);");
	set_frame_size(0X804D6B8, 0, 0, 0);
	add_func    (0X804D6BC,0X804D6C0);
	set_func_flags(0X804D6BC,0x5400);
	SetType(0X804D6BC, "int strncasecmp(const char *s1, const char *s2, size_t n);");
	set_frame_size(0X804D6BC, 0, 0, 0);
	add_func    (0X804D6C0,0X804D6C4);
	set_func_flags(0X804D6C0,0x5400);
	SetType(0X804D6C0, "int vfprintf(FILE *s, const char *format, __gnuc_va_list arg);");
	set_frame_size(0X804D6C0, 0, 0, 0);
	add_func    (0X804D6C4,0X804D6C8);
	set_func_flags(0X804D6C4,0x5400);
	SetType(0X804D6C4, "int atoi(const char *nptr);");
	set_frame_size(0X804D6C4, 0, 0, 0);
	add_func    (0X804D6C8,0X804D6CC);
	set_func_flags(0X804D6C8,0x5400);
	SetType(0X804D6C8, "int strncmp(const char *s1, const char *s2, size_t n);");
	set_frame_size(0X804D6C8, 0, 0, 0);
	add_func    (0X804D6CC,0X804D6D0);
	set_func_flags(0X804D6CC,0x5400);
	SetType(0X804D6CC, "size_t strspn(const char *s, const char *accept);");
	set_frame_size(0X804D6CC, 0, 0, 0);
	add_func    (0X804D6D0,0X804D6D4);
	set_func_flags(0X804D6D0,0x5400);
	SetType(0X804D6D0, "char *strncat(char *dest, const char *src, size_t n);");
	set_frame_size(0X804D6D0, 0, 0, 0);
	add_func    (0X804D6D4,0X804D6D8);
	set_func_flags(0X804D6D4,0x1400);
}

//------------------------------------------------------------------------
// Information about functions

static Functions(void) {

	Functions_0();
}

//------------------------------------------------------------------------
// Information about segment registers

static SegRegs(void) {
	split_sreg_range(0X8048000,"es",0,3);
	split_sreg_range(0X8048718,"es",0XFFFFFFFF,3);
	split_sreg_range(0X804873B,"es",0,3);
	split_sreg_range(0X8048740,"es",0XFFFFFFFF,3);
	split_sreg_range(0X8048940,"es",0XFFFFFFFF,3);
	split_sreg_range(0X8048948,"es",0,3);
	split_sreg_range(0X8048950,"es",0XFFFFFFFF,3);
	split_sreg_range(0X8049A92,"es",0,3);
	split_sreg_range(0X8049A94,"es",0XFFFFFFFF,3);
	split_sreg_range(0X8049AA8,"es",0XFFFFFFFF,3);
	split_sreg_range(0X8049F6A,"es",0,3);
	split_sreg_range(0X8049F6C,"es",0XFFFFFFFF,3);
	split_sreg_range(0X804A018,"es",0XFFFFFFFF,3);
	split_sreg_range(0X804A2F0,"es",0,3);
	split_sreg_range(0X804BF08,"es",0XFFFFFFFF,3);
	split_sreg_range(0X804BF0C,"es",0XFFFFFFFF,3);
	split_sreg_range(0X804BF10,"es",0XFFFFFFFF,3);
	split_sreg_range(0X804BF14,"es",0,3);
	split_sreg_range(0X804BFFC,"es",0XFFFFFFFF,3);
	split_sreg_range(0X804C000,"es",0XFFFFFFFF,3);
	split_sreg_range(0X804C088,"es",0,3);
	split_sreg_range(0X804C0A0,"es",0XFFFFFFFF,3);
	split_sreg_range(0X804C658,"es",0,3);
	split_sreg_range(0X804C660,"es",0XFFFFFFFF,3);
	split_sreg_range(0X804C694,"es",0,3);
	split_sreg_range(0X804D658,"es",0XFFFFFFFF,3);
	split_sreg_range(0X8048000,"ss",0,3);
	split_sreg_range(0X8048718,"ss",0XFFFFFFFF,3);
	split_sreg_range(0X804873B,"ss",0,3);
	split_sreg_range(0X8048740,"ss",0XFFFFFFFF,3);
	split_sreg_range(0X8048940,"ss",0XFFFFFFFF,3);
	split_sreg_range(0X8048948,"ss",0,3);
	split_sreg_range(0X8048950,"ss",0XFFFFFFFF,3);
	split_sreg_range(0X8049A92,"ss",0,3);
	split_sreg_range(0X8049A94,"ss",0XFFFFFFFF,3);
	split_sreg_range(0X8049AA8,"ss",0XFFFFFFFF,3);
	split_sreg_range(0X8049F6A,"ss",0,3);
	split_sreg_range(0X8049F6C,"ss",0XFFFFFFFF,3);
	split_sreg_range(0X804A018,"ss",0XFFFFFFFF,3);
	split_sreg_range(0X804A2F0,"ss",0,3);
	split_sreg_range(0X804BF08,"ss",0XFFFFFFFF,3);
	split_sreg_range(0X804BF0C,"ss",0XFFFFFFFF,3);
	split_sreg_range(0X804BF10,"ss",0XFFFFFFFF,3);
	split_sreg_range(0X804BF14,"ss",0,3);
	split_sreg_range(0X804BFFC,"ss",0XFFFFFFFF,3);
	split_sreg_range(0X804C000,"ss",0XFFFFFFFF,3);
	split_sreg_range(0X804C088,"ss",0,3);
	split_sreg_range(0X804C0A0,"ss",0XFFFFFFFF,3);
	split_sreg_range(0X804C658,"ss",0,3);
	split_sreg_range(0X804C660,"ss",0XFFFFFFFF,3);
	split_sreg_range(0X804C694,"ss",0,3);
	split_sreg_range(0X804D658,"ss",0XFFFFFFFF,3);
	split_sreg_range(0X8048000,"ds",0X11,3);
	split_sreg_range(0X8048718,"ds",0X11,3);
	split_sreg_range(0X804873B,"ds",0X11,3);
	split_sreg_range(0X8048740,"ds",0X11,3);
	split_sreg_range(0X8048940,"ds",0X11,3);
	split_sreg_range(0X8048948,"ds",0X11,3);
	split_sreg_range(0X8048950,"ds",0X11,3);
	split_sreg_range(0X8049A92,"ds",0X11,3);
	split_sreg_range(0X8049A94,"ds",0X11,3);
	split_sreg_range(0X8049AA8,"ds",0X11,3);
	split_sreg_range(0X8049F6A,"ds",0X11,3);
	split_sreg_range(0X8049F6C,"ds",0X11,3);
	split_sreg_range(0X804A018,"ds",0X11,3);
	split_sreg_range(0X804A2F0,"ds",0X11,3);
	split_sreg_range(0X804BF08,"ds",0X11,3);
	split_sreg_range(0X804BF0C,"ds",0X11,3);
	split_sreg_range(0X804BF10,"ds",0X11,3);
	split_sreg_range(0X804BF14,"ds",0X11,3);
	split_sreg_range(0X804BFFC,"ds",0X11,3);
	split_sreg_range(0X804C000,"ds",0X11,3);
	split_sreg_range(0X804C088,"ds",0X11,3);
	split_sreg_range(0X804C0A0,"ds",0X11,3);
	split_sreg_range(0X804C658,"ds",0X11,3);
	split_sreg_range(0X804C660,"ds",0X11,3);
	split_sreg_range(0X804C694,"ds",0X11,3);
	split_sreg_range(0X804D658,"ds",0XFFFFFFFF,3);
	split_sreg_range(0X8048000,"fs",0,3);
	split_sreg_range(0X8048718,"fs",0XFFFFFFFF,3);
	split_sreg_range(0X804873B,"fs",0,3);
	split_sreg_range(0X8048740,"fs",0XFFFFFFFF,3);
	split_sreg_range(0X8048940,"fs",0XFFFFFFFF,3);
	split_sreg_range(0X8048948,"fs",0,3);
	split_sreg_range(0X8048950,"fs",0XFFFFFFFF,3);
	split_sreg_range(0X8049A92,"fs",0,3);
	split_sreg_range(0X8049A94,"fs",0XFFFFFFFF,3);
	split_sreg_range(0X8049AA8,"fs",0XFFFFFFFF,3);
	split_sreg_range(0X8049F6A,"fs",0,3);
	split_sreg_range(0X8049F6C,"fs",0XFFFFFFFF,3);
	split_sreg_range(0X804A018,"fs",0XFFFFFFFF,3);
	split_sreg_range(0X804A2F0,"fs",0,3);
	split_sreg_range(0X804BF08,"fs",0XFFFFFFFF,3);
	split_sreg_range(0X804BF0C,"fs",0XFFFFFFFF,3);
	split_sreg_range(0X804BF10,"fs",0XFFFFFFFF,3);
	split_sreg_range(0X804BF14,"fs",0,3);
	split_sreg_range(0X804BFFC,"fs",0XFFFFFFFF,3);
	split_sreg_range(0X804C000,"fs",0XFFFFFFFF,3);
	split_sreg_range(0X804C088,"fs",0,3);
	split_sreg_range(0X804C0A0,"fs",0XFFFFFFFF,3);
	split_sreg_range(0X804C658,"fs",0,3);
	split_sreg_range(0X804C660,"fs",0XFFFFFFFF,3);
	split_sreg_range(0X804C694,"fs",0,3);
	split_sreg_range(0X804D658,"fs",0XFFFFFFFF,3);
	split_sreg_range(0X8048000,"gs",0,3);
	split_sreg_range(0X8048718,"gs",0XFFFFFFFF,3);
	split_sreg_range(0X804873B,"gs",0,3);
	split_sreg_range(0X8048740,"gs",0XFFFFFFFF,3);
	split_sreg_range(0X8048940,"gs",0XFFFFFFFF,3);
	split_sreg_range(0X8048948,"gs",0,3);
	split_sreg_range(0X8048950,"gs",0XFFFFFFFF,3);
	split_sreg_range(0X8049A92,"gs",0,3);
	split_sreg_range(0X8049A94,"gs",0XFFFFFFFF,3);
	split_sreg_range(0X8049AA8,"gs",0XFFFFFFFF,3);
	split_sreg_range(0X8049F6A,"gs",0,3);
	split_sreg_range(0X8049F6C,"gs",0XFFFFFFFF,3);
	split_sreg_range(0X804A018,"gs",0XFFFFFFFF,3);
	split_sreg_range(0X804A2F0,"gs",0,3);
	split_sreg_range(0X804BF08,"gs",0XFFFFFFFF,3);
	split_sreg_range(0X804BF0C,"gs",0XFFFFFFFF,3);
	split_sreg_range(0X804BF10,"gs",0XFFFFFFFF,3);
	split_sreg_range(0X804BF14,"gs",0,3);
	split_sreg_range(0X804BFFC,"gs",0XFFFFFFFF,3);
	split_sreg_range(0X804C000,"gs",0XFFFFFFFF,3);
	split_sreg_range(0X804C088,"gs",0,3);
	split_sreg_range(0X804C0A0,"gs",0XFFFFFFFF,3);
	split_sreg_range(0X804C658,"gs",0,3);
	split_sreg_range(0X804C660,"gs",0XFFFFFFFF,3);
	split_sreg_range(0X804C694,"gs",0,3);
	split_sreg_range(0X804D658,"gs",0XFFFFFFFF,3);
}

//------------------------------------------------------------------------
// Information about all patched bytes:

static Patches(void) {
}

//------------------------------------------------------------------------
// Call all byte feature functions:

static Bytes(void) {
	Bytes_0();
        end_type_updating(UTP_STRUCT);
}

// End of file.
